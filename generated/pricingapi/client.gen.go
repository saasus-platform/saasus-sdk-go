// Package pricingapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package pricingapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReturnInternalServerError request
	ReturnInternalServerError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingMenus request
	GetPricingMenus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePricingMenu request with any body
	CreatePricingMenuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePricingMenu(ctx context.Context, body CreatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePricingMenu request
	DeletePricingMenu(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingMenu request
	GetPricingMenu(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePricingMenu request with any body
	UpdatePricingMenuWithBody(ctx context.Context, menuId MenuId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePricingMenu(ctx context.Context, menuId MenuId, body UpdatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitDateCountsByTenantIdAndDate request
	GetMeteringUnitDateCountsByTenantIdAndDate(ctx context.Context, tenantId TenantId, date DateString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitMonthCountsByTenantIdAndMonth request
	GetMeteringUnitMonthCountsByTenantIdAndMonth(ctx context.Context, tenantId TenantId, month MonthString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod request
	GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, params *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate request
	GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, date DateString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth request
	GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, month MonthString, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMeteringUnitTimestampCountNow request with any body
	UpdateMeteringUnitTimestampCountNowWithBody(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMeteringUnitTimestampCountNow(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, body UpdateMeteringUnitTimestampCountNowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth request
	GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMeteringUnitTimestampCount request
	DeleteMeteringUnitTimestampCount(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMeteringUnitTimestampCount request with any body
	UpdateMeteringUnitTimestampCountWithBody(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMeteringUnitTimestampCount(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, body UpdateMeteringUnitTimestampCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameToday request
	GetMeteringUnitDateCountByTenantIdAndUnitNameToday(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingPlans request
	GetPricingPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePricingPlan request with any body
	CreatePricingPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePricingPlan(ctx context.Context, body CreatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates request
	DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePricingPlansUsed request with any body
	UpdatePricingPlansUsedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePricingPlansUsed(ctx context.Context, body UpdatePricingPlansUsedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePricingPlan request
	DeletePricingPlan(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingPlan request
	GetPricingPlan(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePricingPlan request with any body
	UpdatePricingPlanWithBody(ctx context.Context, planId PlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePricingPlan(ctx context.Context, planId PlanId, body UpdatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStripePlan request
	DeleteStripePlan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LinkPlanToStripe request
	LinkPlanToStripe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRates request
	GetTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTaxRate request with any body
	CreateTaxRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTaxRate(ctx context.Context, body CreateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTaxRate request with any body
	UpdateTaxRateWithBody(ctx context.Context, taxRateId TaxRateId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTaxRate(ctx context.Context, taxRateId TaxRateId, body UpdateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingUnits request
	GetPricingUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePricingUnit request with any body
	CreatePricingUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePricingUnit(ctx context.Context, body CreatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePricingUnit request
	DeletePricingUnit(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricingUnit request
	GetPricingUnit(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePricingUnit request with any body
	UpdatePricingUnitWithBody(ctx context.Context, pricingUnitId PricingUnitId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePricingUnit(ctx context.Context, pricingUnitId PricingUnitId, body UpdatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReturnInternalServerError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnInternalServerErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingMenus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingMenusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingMenuWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingMenuRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingMenu(ctx context.Context, body CreatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingMenuRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricingMenu(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricingMenuRequest(c.Server, menuId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingMenu(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingMenuRequest(c.Server, menuId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingMenuWithBody(ctx context.Context, menuId MenuId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingMenuRequestWithBody(c.Server, menuId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingMenu(ctx context.Context, menuId MenuId, body UpdatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingMenuRequest(c.Server, menuId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitDateCountsByTenantIdAndDate(ctx context.Context, tenantId TenantId, date DateString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitDateCountsByTenantIdAndDateRequest(c.Server, tenantId, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitMonthCountsByTenantIdAndMonth(ctx context.Context, tenantId TenantId, month MonthString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitMonthCountsByTenantIdAndMonthRequest(c.Server, tenantId, month)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, params *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodRequest(c.Server, tenantId, meteringUnitName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, date DateString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateRequest(c.Server, tenantId, meteringUnitName, date)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, month MonthString, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthRequest(c.Server, tenantId, meteringUnitName, month)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeteringUnitTimestampCountNowWithBody(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeteringUnitTimestampCountNowRequestWithBody(c.Server, tenantId, meteringUnitName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeteringUnitTimestampCountNow(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, body UpdateMeteringUnitTimestampCountNowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeteringUnitTimestampCountNowRequest(c.Server, tenantId, meteringUnitName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthRequest(c.Server, tenantId, meteringUnitName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMeteringUnitTimestampCount(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMeteringUnitTimestampCountRequest(c.Server, tenantId, meteringUnitName, timestamp)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeteringUnitTimestampCountWithBody(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeteringUnitTimestampCountRequestWithBody(c.Server, tenantId, meteringUnitName, timestamp, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMeteringUnitTimestampCount(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, body UpdateMeteringUnitTimestampCountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMeteringUnitTimestampCountRequest(c.Server, tenantId, meteringUnitName, timestamp, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeteringUnitDateCountByTenantIdAndUnitNameToday(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeteringUnitDateCountByTenantIdAndUnitNameTodayRequest(c.Server, tenantId, meteringUnitName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingPlans(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingPlansRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingPlan(ctx context.Context, body CreatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingPlansUsedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingPlansUsedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingPlansUsed(ctx context.Context, body UpdatePricingPlansUsedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingPlansUsedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricingPlan(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricingPlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingPlan(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingPlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingPlanWithBody(ctx context.Context, planId PlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingPlanRequestWithBody(c.Server, planId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingPlan(ctx context.Context, planId PlanId, body UpdatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingPlanRequest(c.Server, planId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStripePlan(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStripePlanRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LinkPlanToStripe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLinkPlanToStripeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaxRateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaxRateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaxRate(ctx context.Context, body CreateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaxRateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaxRateWithBody(ctx context.Context, taxRateId TaxRateId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaxRateRequestWithBody(c.Server, taxRateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTaxRate(ctx context.Context, taxRateId TaxRateId, body UpdateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTaxRateRequest(c.Server, taxRateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingUnitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingUnitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePricingUnit(ctx context.Context, body CreatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePricingUnitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricingUnit(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricingUnitRequest(c.Server, pricingUnitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricingUnit(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricingUnitRequest(c.Server, pricingUnitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingUnitWithBody(ctx context.Context, pricingUnitId PricingUnitId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingUnitRequestWithBody(c.Server, pricingUnitId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePricingUnit(ctx context.Context, pricingUnitId PricingUnitId, body UpdatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePricingUnitRequest(c.Server, pricingUnitId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReturnInternalServerErrorRequest generates requests for ReturnInternalServerError
func NewReturnInternalServerErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/errors/internal-server-error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPricingMenusRequest generates requests for GetPricingMenus
func NewGetPricingMenusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/menus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePricingMenuRequest calls the generic CreatePricingMenu builder with application/json body
func NewCreatePricingMenuRequest(server string, body CreatePricingMenuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePricingMenuRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePricingMenuRequestWithBody generates requests for CreatePricingMenu with any type of body
func NewCreatePricingMenuRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/menus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePricingMenuRequest generates requests for DeletePricingMenu
func NewDeletePricingMenuRequest(server string, menuId MenuId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "menu_id", runtime.ParamLocationPath, menuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/menus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPricingMenuRequest generates requests for GetPricingMenu
func NewGetPricingMenuRequest(server string, menuId MenuId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "menu_id", runtime.ParamLocationPath, menuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/menus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePricingMenuRequest calls the generic UpdatePricingMenu builder with application/json body
func NewUpdatePricingMenuRequest(server string, menuId MenuId, body UpdatePricingMenuJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePricingMenuRequestWithBody(server, menuId, "application/json", bodyReader)
}

// NewUpdatePricingMenuRequestWithBody generates requests for UpdatePricingMenu with any type of body
func NewUpdatePricingMenuRequestWithBody(server string, menuId MenuId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "menu_id", runtime.ParamLocationPath, menuId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/menus/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeteringUnitDateCountsByTenantIdAndDateRequest generates requests for GetMeteringUnitDateCountsByTenantIdAndDate
func NewGetMeteringUnitDateCountsByTenantIdAndDateRequest(server string, tenantId TenantId, date DateString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/date/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeteringUnitMonthCountsByTenantIdAndMonthRequest generates requests for GetMeteringUnitMonthCountsByTenantIdAndMonth
func NewGetMeteringUnitMonthCountsByTenantIdAndMonthRequest(server string, tenantId TenantId, month MonthString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "month", runtime.ParamLocationPath, month)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/month/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodRequest generates requests for GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod
func NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, params *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/date-period", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartTimestamp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_timestamp", runtime.ParamLocationQuery, *params.StartTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTimestamp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_timestamp", runtime.ParamLocationQuery, *params.EndTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateRequest generates requests for GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate
func NewGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, date DateString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "date", runtime.ParamLocationPath, date)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/date/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthRequest generates requests for GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth
func NewGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, month MonthString) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "month", runtime.ParamLocationPath, month)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/month/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMeteringUnitTimestampCountNowRequest calls the generic UpdateMeteringUnitTimestampCountNow builder with application/json body
func NewUpdateMeteringUnitTimestampCountNowRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, body UpdateMeteringUnitTimestampCountNowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMeteringUnitTimestampCountNowRequestWithBody(server, tenantId, meteringUnitName, "application/json", bodyReader)
}

// NewUpdateMeteringUnitTimestampCountNowRequestWithBody generates requests for UpdateMeteringUnitTimestampCountNow with any type of body
func NewUpdateMeteringUnitTimestampCountNowRequestWithBody(server string, tenantId TenantId, meteringUnitName MeteringUnitName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/now", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthRequest generates requests for GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth
func NewGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/thismonth", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMeteringUnitTimestampCountRequest generates requests for DeleteMeteringUnitTimestampCount
func NewDeleteMeteringUnitTimestampCountRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, timestamp)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/timestamp/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMeteringUnitTimestampCountRequest calls the generic UpdateMeteringUnitTimestampCount builder with application/json body
func NewUpdateMeteringUnitTimestampCountRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, body UpdateMeteringUnitTimestampCountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMeteringUnitTimestampCountRequestWithBody(server, tenantId, meteringUnitName, timestamp, "application/json", bodyReader)
}

// NewUpdateMeteringUnitTimestampCountRequestWithBody generates requests for UpdateMeteringUnitTimestampCount with any type of body
func NewUpdateMeteringUnitTimestampCountRequestWithBody(server string, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "timestamp", runtime.ParamLocationPath, timestamp)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/timestamp/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeteringUnitDateCountByTenantIdAndUnitNameTodayRequest generates requests for GetMeteringUnitDateCountByTenantIdAndUnitNameToday
func NewGetMeteringUnitDateCountByTenantIdAndUnitNameTodayRequest(server string, tenantId TenantId, meteringUnitName MeteringUnitName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tenant_id", runtime.ParamLocationPath, tenantId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "metering_unit_name", runtime.ParamLocationPath, meteringUnitName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metering/tenants/%s/units/%s/today", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPricingPlansRequest generates requests for GetPricingPlans
func NewGetPricingPlansRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePricingPlanRequest calls the generic CreatePricingPlan builder with application/json body
func NewCreatePricingPlanRequest(server string, body CreatePricingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePricingPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePricingPlanRequestWithBody generates requests for CreatePricingPlan with any type of body
func NewCreatePricingPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesRequest generates requests for DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates
func NewDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans-initialization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePricingPlansUsedRequest calls the generic UpdatePricingPlansUsed builder with application/json body
func NewUpdatePricingPlansUsedRequest(server string, body UpdatePricingPlansUsedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePricingPlansUsedRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePricingPlansUsedRequestWithBody generates requests for UpdatePricingPlansUsed with any type of body
func NewUpdatePricingPlansUsedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/used")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePricingPlanRequest generates requests for DeletePricingPlan
func NewDeletePricingPlanRequest(server string, planId PlanId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plan_id", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPricingPlanRequest generates requests for GetPricingPlan
func NewGetPricingPlanRequest(server string, planId PlanId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plan_id", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePricingPlanRequest calls the generic UpdatePricingPlan builder with application/json body
func NewUpdatePricingPlanRequest(server string, planId PlanId, body UpdatePricingPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePricingPlanRequestWithBody(server, planId, "application/json", bodyReader)
}

// NewUpdatePricingPlanRequestWithBody generates requests for UpdatePricingPlan with any type of body
func NewUpdatePricingPlanRequestWithBody(server string, planId PlanId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plan_id", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStripePlanRequest generates requests for DeleteStripePlan
func NewDeleteStripePlanRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stripe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLinkPlanToStripeRequest generates requests for LinkPlanToStripe
func NewLinkPlanToStripeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stripe/init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxRatesRequest generates requests for GetTaxRates
func NewGetTaxRatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTaxRateRequest calls the generic CreateTaxRate builder with application/json body
func NewCreateTaxRateRequest(server string, body CreateTaxRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaxRateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTaxRateRequestWithBody generates requests for CreateTaxRate with any type of body
func NewCreateTaxRateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTaxRateRequest calls the generic UpdateTaxRate builder with application/json body
func NewUpdateTaxRateRequest(server string, taxRateId TaxRateId, body UpdateTaxRateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTaxRateRequestWithBody(server, taxRateId, "application/json", bodyReader)
}

// NewUpdateTaxRateRequestWithBody generates requests for UpdateTaxRate with any type of body
func NewUpdateTaxRateRequestWithBody(server string, taxRateId TaxRateId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tax_rate_id", runtime.ParamLocationPath, taxRateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPricingUnitsRequest generates requests for GetPricingUnits
func NewGetPricingUnitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePricingUnitRequest calls the generic CreatePricingUnit builder with application/json body
func NewCreatePricingUnitRequest(server string, body CreatePricingUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePricingUnitRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePricingUnitRequestWithBody generates requests for CreatePricingUnit with any type of body
func NewCreatePricingUnitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePricingUnitRequest generates requests for DeletePricingUnit
func NewDeletePricingUnitRequest(server string, pricingUnitId PricingUnitId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pricing_unit_id", runtime.ParamLocationPath, pricingUnitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPricingUnitRequest generates requests for GetPricingUnit
func NewGetPricingUnitRequest(server string, pricingUnitId PricingUnitId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pricing_unit_id", runtime.ParamLocationPath, pricingUnitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePricingUnitRequest calls the generic UpdatePricingUnit builder with application/json body
func NewUpdatePricingUnitRequest(server string, pricingUnitId PricingUnitId, body UpdatePricingUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePricingUnitRequestWithBody(server, pricingUnitId, "application/json", bodyReader)
}

// NewUpdatePricingUnitRequestWithBody generates requests for UpdatePricingUnit with any type of body
func NewUpdatePricingUnitRequestWithBody(server string, pricingUnitId PricingUnitId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pricing_unit_id", runtime.ParamLocationPath, pricingUnitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReturnInternalServerError request
	ReturnInternalServerErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReturnInternalServerErrorResponse, error)

	// GetPricingMenus request
	GetPricingMenusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingMenusResponse, error)

	// CreatePricingMenu request with any body
	CreatePricingMenuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingMenuResponse, error)

	CreatePricingMenuWithResponse(ctx context.Context, body CreatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingMenuResponse, error)

	// DeletePricingMenu request
	DeletePricingMenuWithResponse(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*DeletePricingMenuResponse, error)

	// GetPricingMenu request
	GetPricingMenuWithResponse(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*GetPricingMenuResponse, error)

	// UpdatePricingMenu request with any body
	UpdatePricingMenuWithBodyWithResponse(ctx context.Context, menuId MenuId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingMenuResponse, error)

	UpdatePricingMenuWithResponse(ctx context.Context, menuId MenuId, body UpdatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingMenuResponse, error)

	// GetMeteringUnitDateCountsByTenantIdAndDate request
	GetMeteringUnitDateCountsByTenantIdAndDateWithResponse(ctx context.Context, tenantId TenantId, date DateString, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountsByTenantIdAndDateResponse, error)

	// GetMeteringUnitMonthCountsByTenantIdAndMonth request
	GetMeteringUnitMonthCountsByTenantIdAndMonthWithResponse(ctx context.Context, tenantId TenantId, month MonthString, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountsByTenantIdAndMonthResponse, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod request
	GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, params *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate request
	GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, date DateString, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse, error)

	// GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth request
	GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, month MonthString, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse, error)

	// UpdateMeteringUnitTimestampCountNow request with any body
	UpdateMeteringUnitTimestampCountNowWithBodyWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountNowResponse, error)

	UpdateMeteringUnitTimestampCountNowWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, body UpdateMeteringUnitTimestampCountNowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountNowResponse, error)

	// GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth request
	GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse, error)

	// DeleteMeteringUnitTimestampCount request
	DeleteMeteringUnitTimestampCountWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, reqEditors ...RequestEditorFn) (*DeleteMeteringUnitTimestampCountResponse, error)

	// UpdateMeteringUnitTimestampCount request with any body
	UpdateMeteringUnitTimestampCountWithBodyWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountResponse, error)

	UpdateMeteringUnitTimestampCountWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, body UpdateMeteringUnitTimestampCountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountResponse, error)

	// GetMeteringUnitDateCountByTenantIdAndUnitNameToday request
	GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse, error)

	// GetPricingPlans request
	GetPricingPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingPlansResponse, error)

	// CreatePricingPlan request with any body
	CreatePricingPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingPlanResponse, error)

	CreatePricingPlanWithResponse(ctx context.Context, body CreatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingPlanResponse, error)

	// DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates request
	DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse, error)

	// UpdatePricingPlansUsed request with any body
	UpdatePricingPlansUsedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingPlansUsedResponse, error)

	UpdatePricingPlansUsedWithResponse(ctx context.Context, body UpdatePricingPlansUsedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingPlansUsedResponse, error)

	// DeletePricingPlan request
	DeletePricingPlanWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*DeletePricingPlanResponse, error)

	// GetPricingPlan request
	GetPricingPlanWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*GetPricingPlanResponse, error)

	// UpdatePricingPlan request with any body
	UpdatePricingPlanWithBodyWithResponse(ctx context.Context, planId PlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingPlanResponse, error)

	UpdatePricingPlanWithResponse(ctx context.Context, planId PlanId, body UpdatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingPlanResponse, error)

	// DeleteStripePlan request
	DeleteStripePlanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteStripePlanResponse, error)

	// LinkPlanToStripe request
	LinkPlanToStripeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LinkPlanToStripeResponse, error)

	// GetTaxRates request
	GetTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error)

	// CreateTaxRate request with any body
	CreateTaxRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaxRateResponse, error)

	CreateTaxRateWithResponse(ctx context.Context, body CreateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaxRateResponse, error)

	// UpdateTaxRate request with any body
	UpdateTaxRateWithBodyWithResponse(ctx context.Context, taxRateId TaxRateId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaxRateResponse, error)

	UpdateTaxRateWithResponse(ctx context.Context, taxRateId TaxRateId, body UpdateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaxRateResponse, error)

	// GetPricingUnits request
	GetPricingUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingUnitsResponse, error)

	// CreatePricingUnit request with any body
	CreatePricingUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingUnitResponse, error)

	CreatePricingUnitWithResponse(ctx context.Context, body CreatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingUnitResponse, error)

	// DeletePricingUnit request
	DeletePricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*DeletePricingUnitResponse, error)

	// GetPricingUnit request
	GetPricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*GetPricingUnitResponse, error)

	// UpdatePricingUnit request with any body
	UpdatePricingUnitWithBodyWithResponse(ctx context.Context, pricingUnitId PricingUnitId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingUnitResponse, error)

	UpdatePricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, body UpdatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingUnitResponse, error)
}

type ReturnInternalServerErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ReturnInternalServerErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnInternalServerErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingMenusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingMenus
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingMenusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingMenusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePricingMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PricingMenu
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePricingMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePricingMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePricingMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePricingMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePricingMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingMenu
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePricingMenuResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePricingMenuResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePricingMenuResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitDateCountsByTenantIdAndDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitDateCounts
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitDateCountsByTenantIdAndDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitDateCountsByTenantIdAndDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitMonthCountsByTenantIdAndMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitMonthCounts
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitMonthCountsByTenantIdAndMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitMonthCountsByTenantIdAndMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitDatePeriodCounts
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitDateCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitMonthCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMeteringUnitTimestampCountNowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitTimestampCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateMeteringUnitTimestampCountNowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMeteringUnitTimestampCountNowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitMonthCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMeteringUnitTimestampCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteMeteringUnitTimestampCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMeteringUnitTimestampCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMeteringUnitTimestampCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitTimestampCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateMeteringUnitTimestampCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMeteringUnitTimestampCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeteringUnitDateCount
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingPlans
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePricingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PricingPlan
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePricingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePricingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePricingPlansUsedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePricingPlansUsedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePricingPlansUsedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePricingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePricingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePricingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingPlan
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePricingPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePricingPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePricingPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStripePlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteStripePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStripePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkPlanToStripeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r LinkPlanToStripeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkPlanToStripeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRates
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaxRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TaxRate
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateTaxRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaxRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTaxRateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateTaxRateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTaxRateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingUnits
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePricingUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PricingUnit
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePricingUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePricingUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePricingUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePricingUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePricingUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricingUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PricingUnit
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetPricingUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricingUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePricingUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePricingUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePricingUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReturnInternalServerErrorWithResponse request returning *ReturnInternalServerErrorResponse
func (c *ClientWithResponses) ReturnInternalServerErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReturnInternalServerErrorResponse, error) {
	rsp, err := c.ReturnInternalServerError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnInternalServerErrorResponse(rsp)
}

// GetPricingMenusWithResponse request returning *GetPricingMenusResponse
func (c *ClientWithResponses) GetPricingMenusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingMenusResponse, error) {
	rsp, err := c.GetPricingMenus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingMenusResponse(rsp)
}

// CreatePricingMenuWithBodyWithResponse request with arbitrary body returning *CreatePricingMenuResponse
func (c *ClientWithResponses) CreatePricingMenuWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingMenuResponse, error) {
	rsp, err := c.CreatePricingMenuWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingMenuResponse(rsp)
}

func (c *ClientWithResponses) CreatePricingMenuWithResponse(ctx context.Context, body CreatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingMenuResponse, error) {
	rsp, err := c.CreatePricingMenu(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingMenuResponse(rsp)
}

// DeletePricingMenuWithResponse request returning *DeletePricingMenuResponse
func (c *ClientWithResponses) DeletePricingMenuWithResponse(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*DeletePricingMenuResponse, error) {
	rsp, err := c.DeletePricingMenu(ctx, menuId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricingMenuResponse(rsp)
}

// GetPricingMenuWithResponse request returning *GetPricingMenuResponse
func (c *ClientWithResponses) GetPricingMenuWithResponse(ctx context.Context, menuId MenuId, reqEditors ...RequestEditorFn) (*GetPricingMenuResponse, error) {
	rsp, err := c.GetPricingMenu(ctx, menuId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingMenuResponse(rsp)
}

// UpdatePricingMenuWithBodyWithResponse request with arbitrary body returning *UpdatePricingMenuResponse
func (c *ClientWithResponses) UpdatePricingMenuWithBodyWithResponse(ctx context.Context, menuId MenuId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingMenuResponse, error) {
	rsp, err := c.UpdatePricingMenuWithBody(ctx, menuId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingMenuResponse(rsp)
}

func (c *ClientWithResponses) UpdatePricingMenuWithResponse(ctx context.Context, menuId MenuId, body UpdatePricingMenuJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingMenuResponse, error) {
	rsp, err := c.UpdatePricingMenu(ctx, menuId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingMenuResponse(rsp)
}

// GetMeteringUnitDateCountsByTenantIdAndDateWithResponse request returning *GetMeteringUnitDateCountsByTenantIdAndDateResponse
func (c *ClientWithResponses) GetMeteringUnitDateCountsByTenantIdAndDateWithResponse(ctx context.Context, tenantId TenantId, date DateString, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountsByTenantIdAndDateResponse, error) {
	rsp, err := c.GetMeteringUnitDateCountsByTenantIdAndDate(ctx, tenantId, date, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitDateCountsByTenantIdAndDateResponse(rsp)
}

// GetMeteringUnitMonthCountsByTenantIdAndMonthWithResponse request returning *GetMeteringUnitMonthCountsByTenantIdAndMonthResponse
func (c *ClientWithResponses) GetMeteringUnitMonthCountsByTenantIdAndMonthWithResponse(ctx context.Context, tenantId TenantId, month MonthString, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountsByTenantIdAndMonthResponse, error) {
	rsp, err := c.GetMeteringUnitMonthCountsByTenantIdAndMonth(ctx, tenantId, month, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitMonthCountsByTenantIdAndMonthResponse(rsp)
}

// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithResponse request returning *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse
func (c *ClientWithResponses) GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, params *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse, error) {
	rsp, err := c.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod(ctx, tenantId, meteringUnitName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse(rsp)
}

// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithResponse request returning *GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse
func (c *ClientWithResponses) GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, date DateString, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse, error) {
	rsp, err := c.GetMeteringUnitDateCountByTenantIdAndUnitNameAndDate(ctx, tenantId, meteringUnitName, date, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse(rsp)
}

// GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithResponse request returning *GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse
func (c *ClientWithResponses) GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, month MonthString, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse, error) {
	rsp, err := c.GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonth(ctx, tenantId, meteringUnitName, month, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse(rsp)
}

// UpdateMeteringUnitTimestampCountNowWithBodyWithResponse request with arbitrary body returning *UpdateMeteringUnitTimestampCountNowResponse
func (c *ClientWithResponses) UpdateMeteringUnitTimestampCountNowWithBodyWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountNowResponse, error) {
	rsp, err := c.UpdateMeteringUnitTimestampCountNowWithBody(ctx, tenantId, meteringUnitName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeteringUnitTimestampCountNowResponse(rsp)
}

func (c *ClientWithResponses) UpdateMeteringUnitTimestampCountNowWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, body UpdateMeteringUnitTimestampCountNowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountNowResponse, error) {
	rsp, err := c.UpdateMeteringUnitTimestampCountNow(ctx, tenantId, meteringUnitName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeteringUnitTimestampCountNowResponse(rsp)
}

// GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithResponse request returning *GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse
func (c *ClientWithResponses) GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse, error) {
	rsp, err := c.GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonth(ctx, tenantId, meteringUnitName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse(rsp)
}

// DeleteMeteringUnitTimestampCountWithResponse request returning *DeleteMeteringUnitTimestampCountResponse
func (c *ClientWithResponses) DeleteMeteringUnitTimestampCountWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, reqEditors ...RequestEditorFn) (*DeleteMeteringUnitTimestampCountResponse, error) {
	rsp, err := c.DeleteMeteringUnitTimestampCount(ctx, tenantId, meteringUnitName, timestamp, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMeteringUnitTimestampCountResponse(rsp)
}

// UpdateMeteringUnitTimestampCountWithBodyWithResponse request with arbitrary body returning *UpdateMeteringUnitTimestampCountResponse
func (c *ClientWithResponses) UpdateMeteringUnitTimestampCountWithBodyWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountResponse, error) {
	rsp, err := c.UpdateMeteringUnitTimestampCountWithBody(ctx, tenantId, meteringUnitName, timestamp, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeteringUnitTimestampCountResponse(rsp)
}

func (c *ClientWithResponses) UpdateMeteringUnitTimestampCountWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, timestamp Timestamp, body UpdateMeteringUnitTimestampCountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMeteringUnitTimestampCountResponse, error) {
	rsp, err := c.UpdateMeteringUnitTimestampCount(ctx, tenantId, meteringUnitName, timestamp, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMeteringUnitTimestampCountResponse(rsp)
}

// GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithResponse request returning *GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse
func (c *ClientWithResponses) GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithResponse(ctx context.Context, tenantId TenantId, meteringUnitName MeteringUnitName, reqEditors ...RequestEditorFn) (*GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse, error) {
	rsp, err := c.GetMeteringUnitDateCountByTenantIdAndUnitNameToday(ctx, tenantId, meteringUnitName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse(rsp)
}

// GetPricingPlansWithResponse request returning *GetPricingPlansResponse
func (c *ClientWithResponses) GetPricingPlansWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingPlansResponse, error) {
	rsp, err := c.GetPricingPlans(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingPlansResponse(rsp)
}

// CreatePricingPlanWithBodyWithResponse request with arbitrary body returning *CreatePricingPlanResponse
func (c *ClientWithResponses) CreatePricingPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingPlanResponse, error) {
	rsp, err := c.CreatePricingPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingPlanResponse(rsp)
}

func (c *ClientWithResponses) CreatePricingPlanWithResponse(ctx context.Context, body CreatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingPlanResponse, error) {
	rsp, err := c.CreatePricingPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingPlanResponse(rsp)
}

// DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithResponse request returning *DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse
func (c *ClientWithResponses) DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse, error) {
	rsp, err := c.DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse(rsp)
}

// UpdatePricingPlansUsedWithBodyWithResponse request with arbitrary body returning *UpdatePricingPlansUsedResponse
func (c *ClientWithResponses) UpdatePricingPlansUsedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingPlansUsedResponse, error) {
	rsp, err := c.UpdatePricingPlansUsedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingPlansUsedResponse(rsp)
}

func (c *ClientWithResponses) UpdatePricingPlansUsedWithResponse(ctx context.Context, body UpdatePricingPlansUsedJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingPlansUsedResponse, error) {
	rsp, err := c.UpdatePricingPlansUsed(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingPlansUsedResponse(rsp)
}

// DeletePricingPlanWithResponse request returning *DeletePricingPlanResponse
func (c *ClientWithResponses) DeletePricingPlanWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*DeletePricingPlanResponse, error) {
	rsp, err := c.DeletePricingPlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricingPlanResponse(rsp)
}

// GetPricingPlanWithResponse request returning *GetPricingPlanResponse
func (c *ClientWithResponses) GetPricingPlanWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*GetPricingPlanResponse, error) {
	rsp, err := c.GetPricingPlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingPlanResponse(rsp)
}

// UpdatePricingPlanWithBodyWithResponse request with arbitrary body returning *UpdatePricingPlanResponse
func (c *ClientWithResponses) UpdatePricingPlanWithBodyWithResponse(ctx context.Context, planId PlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingPlanResponse, error) {
	rsp, err := c.UpdatePricingPlanWithBody(ctx, planId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingPlanResponse(rsp)
}

func (c *ClientWithResponses) UpdatePricingPlanWithResponse(ctx context.Context, planId PlanId, body UpdatePricingPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingPlanResponse, error) {
	rsp, err := c.UpdatePricingPlan(ctx, planId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingPlanResponse(rsp)
}

// DeleteStripePlanWithResponse request returning *DeleteStripePlanResponse
func (c *ClientWithResponses) DeleteStripePlanWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteStripePlanResponse, error) {
	rsp, err := c.DeleteStripePlan(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStripePlanResponse(rsp)
}

// LinkPlanToStripeWithResponse request returning *LinkPlanToStripeResponse
func (c *ClientWithResponses) LinkPlanToStripeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LinkPlanToStripeResponse, error) {
	rsp, err := c.LinkPlanToStripe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLinkPlanToStripeResponse(rsp)
}

// GetTaxRatesWithResponse request returning *GetTaxRatesResponse
func (c *ClientWithResponses) GetTaxRatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error) {
	rsp, err := c.GetTaxRates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesResponse(rsp)
}

// CreateTaxRateWithBodyWithResponse request with arbitrary body returning *CreateTaxRateResponse
func (c *ClientWithResponses) CreateTaxRateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaxRateResponse, error) {
	rsp, err := c.CreateTaxRateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaxRateResponse(rsp)
}

func (c *ClientWithResponses) CreateTaxRateWithResponse(ctx context.Context, body CreateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaxRateResponse, error) {
	rsp, err := c.CreateTaxRate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaxRateResponse(rsp)
}

// UpdateTaxRateWithBodyWithResponse request with arbitrary body returning *UpdateTaxRateResponse
func (c *ClientWithResponses) UpdateTaxRateWithBodyWithResponse(ctx context.Context, taxRateId TaxRateId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTaxRateResponse, error) {
	rsp, err := c.UpdateTaxRateWithBody(ctx, taxRateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaxRateResponse(rsp)
}

func (c *ClientWithResponses) UpdateTaxRateWithResponse(ctx context.Context, taxRateId TaxRateId, body UpdateTaxRateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTaxRateResponse, error) {
	rsp, err := c.UpdateTaxRate(ctx, taxRateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTaxRateResponse(rsp)
}

// GetPricingUnitsWithResponse request returning *GetPricingUnitsResponse
func (c *ClientWithResponses) GetPricingUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPricingUnitsResponse, error) {
	rsp, err := c.GetPricingUnits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingUnitsResponse(rsp)
}

// CreatePricingUnitWithBodyWithResponse request with arbitrary body returning *CreatePricingUnitResponse
func (c *ClientWithResponses) CreatePricingUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePricingUnitResponse, error) {
	rsp, err := c.CreatePricingUnitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingUnitResponse(rsp)
}

func (c *ClientWithResponses) CreatePricingUnitWithResponse(ctx context.Context, body CreatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePricingUnitResponse, error) {
	rsp, err := c.CreatePricingUnit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePricingUnitResponse(rsp)
}

// DeletePricingUnitWithResponse request returning *DeletePricingUnitResponse
func (c *ClientWithResponses) DeletePricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*DeletePricingUnitResponse, error) {
	rsp, err := c.DeletePricingUnit(ctx, pricingUnitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricingUnitResponse(rsp)
}

// GetPricingUnitWithResponse request returning *GetPricingUnitResponse
func (c *ClientWithResponses) GetPricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, reqEditors ...RequestEditorFn) (*GetPricingUnitResponse, error) {
	rsp, err := c.GetPricingUnit(ctx, pricingUnitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricingUnitResponse(rsp)
}

// UpdatePricingUnitWithBodyWithResponse request with arbitrary body returning *UpdatePricingUnitResponse
func (c *ClientWithResponses) UpdatePricingUnitWithBodyWithResponse(ctx context.Context, pricingUnitId PricingUnitId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePricingUnitResponse, error) {
	rsp, err := c.UpdatePricingUnitWithBody(ctx, pricingUnitId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingUnitResponse(rsp)
}

func (c *ClientWithResponses) UpdatePricingUnitWithResponse(ctx context.Context, pricingUnitId PricingUnitId, body UpdatePricingUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePricingUnitResponse, error) {
	rsp, err := c.UpdatePricingUnit(ctx, pricingUnitId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePricingUnitResponse(rsp)
}

// ParseReturnInternalServerErrorResponse parses an HTTP response from a ReturnInternalServerErrorWithResponse call
func ParseReturnInternalServerErrorResponse(rsp *http.Response) (*ReturnInternalServerErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnInternalServerErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingMenusResponse parses an HTTP response from a GetPricingMenusWithResponse call
func ParseGetPricingMenusResponse(rsp *http.Response) (*GetPricingMenusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingMenusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingMenus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePricingMenuResponse parses an HTTP response from a CreatePricingMenuWithResponse call
func ParseCreatePricingMenuResponse(rsp *http.Response) (*CreatePricingMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePricingMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PricingMenu
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePricingMenuResponse parses an HTTP response from a DeletePricingMenuWithResponse call
func ParseDeletePricingMenuResponse(rsp *http.Response) (*DeletePricingMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePricingMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingMenuResponse parses an HTTP response from a GetPricingMenuWithResponse call
func ParseGetPricingMenuResponse(rsp *http.Response) (*GetPricingMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingMenu
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePricingMenuResponse parses an HTTP response from a UpdatePricingMenuWithResponse call
func ParseUpdatePricingMenuResponse(rsp *http.Response) (*UpdatePricingMenuResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePricingMenuResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitDateCountsByTenantIdAndDateResponse parses an HTTP response from a GetMeteringUnitDateCountsByTenantIdAndDateWithResponse call
func ParseGetMeteringUnitDateCountsByTenantIdAndDateResponse(rsp *http.Response) (*GetMeteringUnitDateCountsByTenantIdAndDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitDateCountsByTenantIdAndDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitDateCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitMonthCountsByTenantIdAndMonthResponse parses an HTTP response from a GetMeteringUnitMonthCountsByTenantIdAndMonthWithResponse call
func ParseGetMeteringUnitMonthCountsByTenantIdAndMonthResponse(rsp *http.Response) (*GetMeteringUnitMonthCountsByTenantIdAndMonthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitMonthCountsByTenantIdAndMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitMonthCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse parses an HTTP response from a GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodWithResponse call
func ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse(rsp *http.Response) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitDatePeriodCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse parses an HTTP response from a GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateWithResponse call
func ParseGetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse(rsp *http.Response) (*GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitDateCountByTenantIdAndUnitNameAndDateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitDateCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse parses an HTTP response from a GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthWithResponse call
func ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse(rsp *http.Response) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitMonthCountByTenantIdAndUnitNameAndMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitMonthCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateMeteringUnitTimestampCountNowResponse parses an HTTP response from a UpdateMeteringUnitTimestampCountNowWithResponse call
func ParseUpdateMeteringUnitTimestampCountNowResponse(rsp *http.Response) (*UpdateMeteringUnitTimestampCountNowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMeteringUnitTimestampCountNowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitTimestampCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse parses an HTTP response from a GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthWithResponse call
func ParseGetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse(rsp *http.Response) (*GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitMonthCountByTenantIdAndUnitNameThisMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitMonthCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteMeteringUnitTimestampCountResponse parses an HTTP response from a DeleteMeteringUnitTimestampCountWithResponse call
func ParseDeleteMeteringUnitTimestampCountResponse(rsp *http.Response) (*DeleteMeteringUnitTimestampCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMeteringUnitTimestampCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateMeteringUnitTimestampCountResponse parses an HTTP response from a UpdateMeteringUnitTimestampCountWithResponse call
func ParseUpdateMeteringUnitTimestampCountResponse(rsp *http.Response) (*UpdateMeteringUnitTimestampCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMeteringUnitTimestampCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitTimestampCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse parses an HTTP response from a GetMeteringUnitDateCountByTenantIdAndUnitNameTodayWithResponse call
func ParseGetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse(rsp *http.Response) (*GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeteringUnitDateCountByTenantIdAndUnitNameTodayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeteringUnitDateCount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingPlansResponse parses an HTTP response from a GetPricingPlansWithResponse call
func ParseGetPricingPlansResponse(rsp *http.Response) (*GetPricingPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingPlans
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePricingPlanResponse parses an HTTP response from a CreatePricingPlanWithResponse call
func ParseCreatePricingPlanResponse(rsp *http.Response) (*CreatePricingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePricingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PricingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse parses an HTTP response from a DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesWithResponse call
func ParseDeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse(rsp *http.Response) (*DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAllPlansAndMenusAndUnitsAndMetersAndTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePricingPlansUsedResponse parses an HTTP response from a UpdatePricingPlansUsedWithResponse call
func ParseUpdatePricingPlansUsedResponse(rsp *http.Response) (*UpdatePricingPlansUsedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePricingPlansUsedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePricingPlanResponse parses an HTTP response from a DeletePricingPlanWithResponse call
func ParseDeletePricingPlanResponse(rsp *http.Response) (*DeletePricingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePricingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingPlanResponse parses an HTTP response from a GetPricingPlanWithResponse call
func ParseGetPricingPlanResponse(rsp *http.Response) (*GetPricingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingPlan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePricingPlanResponse parses an HTTP response from a UpdatePricingPlanWithResponse call
func ParseUpdatePricingPlanResponse(rsp *http.Response) (*UpdatePricingPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePricingPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteStripePlanResponse parses an HTTP response from a DeleteStripePlanWithResponse call
func ParseDeleteStripePlanResponse(rsp *http.Response) (*DeleteStripePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStripePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLinkPlanToStripeResponse parses an HTTP response from a LinkPlanToStripeWithResponse call
func ParseLinkPlanToStripeResponse(rsp *http.Response) (*LinkPlanToStripeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LinkPlanToStripeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaxRatesResponse parses an HTTP response from a GetTaxRatesWithResponse call
func ParseGetTaxRatesResponse(rsp *http.Response) (*GetTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTaxRateResponse parses an HTTP response from a CreateTaxRateWithResponse call
func ParseCreateTaxRateResponse(rsp *http.Response) (*CreateTaxRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaxRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TaxRate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTaxRateResponse parses an HTTP response from a UpdateTaxRateWithResponse call
func ParseUpdateTaxRateResponse(rsp *http.Response) (*UpdateTaxRateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTaxRateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingUnitsResponse parses an HTTP response from a GetPricingUnitsWithResponse call
func ParseGetPricingUnitsResponse(rsp *http.Response) (*GetPricingUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingUnits
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePricingUnitResponse parses an HTTP response from a CreatePricingUnitWithResponse call
func ParseCreatePricingUnitResponse(rsp *http.Response) (*CreatePricingUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePricingUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PricingUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePricingUnitResponse parses an HTTP response from a DeletePricingUnitWithResponse call
func ParseDeletePricingUnitResponse(rsp *http.Response) (*DeletePricingUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePricingUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPricingUnitResponse parses an HTTP response from a GetPricingUnitWithResponse call
func ParseGetPricingUnitResponse(rsp *http.Response) (*GetPricingUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricingUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PricingUnit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePricingUnitResponse parses an HTTP response from a UpdatePricingUnitWithResponse call
func ParseUpdatePricingUnitResponse(rsp *http.Response) (*UpdatePricingUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePricingUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
