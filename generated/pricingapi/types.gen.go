// Package pricingapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package pricingapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AggregateUsage.
const (
	Max AggregateUsage = "max"
	Sum AggregateUsage = "sum"
)

// Defines values for Currency.
const (
	JPY Currency = "JPY"
	USD Currency = "USD"
)

// Defines values for RecurringInterval.
const (
	Month RecurringInterval = "month"
	Year  RecurringInterval = "year"
)

// Defines values for UnitType.
const (
	Fixed       UnitType = "fixed"
	Tiered      UnitType = "tiered"
	TieredUsage UnitType = "tiered_usage"
	Usage       UnitType = "usage"
)

// Defines values for UpdateMeteringUnitTimestampCountMethod.
const (
	Add    UpdateMeteringUnitTimestampCountMethod = "add"
	Direct UpdateMeteringUnitTimestampCountMethod = "direct"
	Sub    UpdateMeteringUnitTimestampCountMethod = "sub"
)

// AggregateUsage 使用量の集計方法(aggregate usage)
// sum: 期間内の使用量の合計(total usage during the period)
// max: 期間内の使用量の最大値(maximum usage during the period)
type AggregateUsage string

// CreatePricingMenuParam defines model for CreatePricingMenuParam.
type CreatePricingMenuParam = SavePricingMenuParam

// CreatePricingPlanParam defines model for CreatePricingPlanParam.
type CreatePricingPlanParam = SavePricingPlanParam

// CreatePricingUnitParam defines model for CreatePricingUnitParam.
type CreatePricingUnitParam = PricingUnitForSave

// CreateTaxRateParam defines model for CreateTaxRateParam.
type CreateTaxRateParam = TaxRateProps

// Currency 計測単位の通貨(unit of currency)
type Currency string

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Type permission_denied
	Type string `json:"type"`
}

// MeteringUnitCount defines model for MeteringUnitCount.
type MeteringUnitCount struct {
	// Count 件数(count)
	Count int `json:"count"`

	// Timestamp 日時(timestamp)
	Timestamp int `json:"timestamp"`
}

// MeteringUnitDateCount defines model for MeteringUnitDateCount.
type MeteringUnitDateCount struct {
	// Count 件数(count)
	Count int `json:"count"`

	// Date 日(date)
	Date string `json:"date"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`
}

// MeteringUnitDateCounts defines model for MeteringUnitDateCounts.
type MeteringUnitDateCounts struct {
	Counts []MeteringUnitDateCount `json:"counts"`
}

// MeteringUnitDatePeriodCounts defines model for MeteringUnitDatePeriodCounts.
type MeteringUnitDatePeriodCounts struct {
	Counts []MeteringUnitCount `json:"counts"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`
}

// MeteringUnitMonthCount defines model for MeteringUnitMonthCount.
type MeteringUnitMonthCount struct {
	// Count 件数(count)
	Count int `json:"count"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`

	// Month 月(month)
	Month string `json:"month"`
}

// MeteringUnitMonthCounts defines model for MeteringUnitMonthCounts.
type MeteringUnitMonthCounts struct {
	Counts []MeteringUnitMonthCount `json:"counts"`
}

// MeteringUnitTimestampCount defines model for MeteringUnitTimestampCount.
type MeteringUnitTimestampCount struct {
	// Count 件数(count)
	Count int `json:"count"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`

	// Timestamp タイムスタンプ(timestamp)
	Timestamp int `json:"timestamp"`
}

// PricingFixedUnit defines model for PricingFixedUnit.
type PricingFixedUnit struct {
	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`
	Id          Uuid   `json:"id"`

	// Name 名前(name)
	Name string `json:"name"`

	// RecurringInterval 繰り返し期間(cycle)
	// month: 月単位(monthly)
	// year: 年単位(yearly)
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UnitAmount 料金(price)
	UnitAmount uint64 `json:"unit_amount"`
	Used       bool   `json:"used"`
}

// PricingFixedUnitForSave defines model for PricingFixedUnitForSave.
type PricingFixedUnitForSave struct {
	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// RecurringInterval 繰り返し期間(cycle)
	// month: 月単位(monthly)
	// year: 年単位(yearly)
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UnitAmount 料金(price)
	UnitAmount uint64 `json:"unit_amount"`
}

// PricingMenu defines model for PricingMenu.
type PricingMenu struct {
	// Description メニュー説明(menu description)
	Description string `json:"description"`

	// DisplayName メニュー表示名(menu display name)
	DisplayName string `json:"display_name"`
	Id          Uuid   `json:"id"`

	// Name メニュー名(menu name)
	Name  string        `json:"name"`
	Units []PricingUnit `json:"units"`

	// Used メニューの使用済み設定(menu used settings)
	Used bool `json:"used"`
}

// PricingMenuProps defines model for PricingMenuProps.
type PricingMenuProps struct {
	// Description メニュー説明(menu description)
	Description string `json:"description"`

	// DisplayName メニュー表示名(menu display name)
	DisplayName string `json:"display_name"`

	// Name メニュー名(menu name)
	Name  string        `json:"name"`
	Units []PricingUnit `json:"units"`

	// Used メニューの使用済み設定(menu used settings)
	Used bool `json:"used"`
}

// PricingMenus defines model for PricingMenus.
type PricingMenus struct {
	PricingMenus []PricingMenu `json:"pricing_menus"`
}

// PricingPlan defines model for PricingPlan.
type PricingPlan struct {
	// Description 料金プラン説明(pricing plan description)
	Description string `json:"description"`

	// DisplayName 料金プラン表示名(pricing plan display name)
	DisplayName string `json:"display_name"`
	Id          Uuid   `json:"id"`

	// Name 料金プラン名(pricing plan name)
	Name         string        `json:"name"`
	PricingMenus []PricingMenu `json:"pricing_menus"`

	// Used 料金プランの使用済み設定(pricing plan used settings)
	Used bool `json:"used"`
}

// PricingPlanProps defines model for PricingPlanProps.
type PricingPlanProps struct {
	// Description 料金プラン説明(pricing plan description)
	Description string `json:"description"`

	// DisplayName 料金プラン表示名(pricing plan display name)
	DisplayName string `json:"display_name"`

	// Name 料金プラン名(pricing plan name)
	Name         string        `json:"name"`
	PricingMenus []PricingMenu `json:"pricing_menus"`

	// Used 料金プランの使用済み設定(pricing plan used settings)
	Used bool `json:"used"`
}

// PricingPlans defines model for PricingPlans.
type PricingPlans struct {
	PricingPlans []PricingPlan `json:"pricing_plans"`
}

// PricingTier defines model for PricingTier.
type PricingTier struct {
	// FlatAmount 固定金額(fixed Amount)
	FlatAmount uint64 `json:"flat_amount"`

	// Inf inf
	Inf bool `json:"inf"`

	// UnitAmount 単位金額(amount per unit)
	UnitAmount uint64 `json:"unit_amount"`

	// UpTo 上限(upper limit)
	UpTo uint64 `json:"up_to"`
}

// PricingTieredUnit defines model for PricingTieredUnit.
type PricingTieredUnit struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName      string `json:"display_name"`
	Id               Uuid   `json:"id"`
	MeteringUnitId   Uuid   `json:"metering_unit_id"`
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// RecurringInterval 繰り返し期間(cycle)
	// month: 月単位(monthly)
	// year: 年単位(yearly)
	RecurringInterval RecurringInterval `json:"recurring_interval"`
	Tiers             []PricingTier     `json:"tiers"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
	Used       bool   `json:"used"`
}

// PricingTieredUnitForSave defines model for PricingTieredUnitForSave.
type PricingTieredUnitForSave struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName      string `json:"display_name"`
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name  string        `json:"name"`
	Tiers []PricingTier `json:"tiers"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
}

// PricingTieredUsageUnit defines model for PricingTieredUsageUnit.
type PricingTieredUsageUnit struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName    string `json:"display_name"`
	Id             Uuid   `json:"id"`
	MeteringUnitId Uuid   `json:"metering_unit_id"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// RecurringInterval 繰り返し期間(cycle)
	// month: 月単位(monthly)
	// year: 年単位(yearly)
	RecurringInterval RecurringInterval `json:"recurring_interval"`
	Tiers             []PricingTier     `json:"tiers"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
	Used       bool   `json:"used"`
}

// PricingTieredUsageUnitForSave defines model for PricingTieredUsageUnitForSave.
type PricingTieredUsageUnitForSave struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`

	// MeteringUnitName 計測ユニット名(metering unit name)
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name  string        `json:"name"`
	Tiers []PricingTier `json:"tiers"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
}

// PricingTiers defines model for PricingTiers.
type PricingTiers struct {
	Tiers []PricingTier `json:"tiers"`
}

// PricingUnit defines model for PricingUnit.
type PricingUnit struct {
	union json.RawMessage
}

// PricingUnitBaseProps defines model for PricingUnitBaseProps.
type PricingUnitBaseProps struct {
	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`
}

// PricingUnitForSave defines model for PricingUnitForSave.
type PricingUnitForSave struct {
	union json.RawMessage
}

// PricingUnits defines model for PricingUnits.
type PricingUnits struct {
	Units []PricingUnit `json:"units"`
}

// PricingUsageUnit defines model for PricingUsageUnit.
type PricingUsageUnit struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName      string `json:"display_name"`
	Id               Uuid   `json:"id"`
	MeteringUnitId   Uuid   `json:"metering_unit_id"`
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// RecurringInterval 繰り返し期間(cycle)
	// month: 月単位(monthly)
	// year: 年単位(yearly)
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UnitAmount 使用量あたりの金額(amount per usage)
	UnitAmount uint64 `json:"unit_amount"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
	Used       bool   `json:"used"`
}

// PricingUsageUnitForSave defines model for PricingUsageUnitForSave.
type PricingUsageUnitForSave struct {
	// AggregateUsage 使用量の集計方法(aggregate usage)
	// sum: 期間内の使用量の合計(total usage during the period)
	// max: 期間内の使用量の最大値(maximum usage during the period)
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency 計測単位の通貨(unit of currency)
	Currency Currency `json:"currency"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName      string `json:"display_name"`
	MeteringUnitName string `json:"metering_unit_name"`

	// Name 名前(name)
	Name string `json:"name"`

	// Type 計測単位の種別(unit of measurement type)
	// fixed: 固定ユニット(fixed unit)
	// usage: 使用量ユニット(usage unit)
	// tiered: 段階ユニット(tiered unit)
	// tiered_usage: 段階的使用量ユニット(tiered usage unit)
	Type UnitType `json:"type"`

	// UnitAmount 使用量あたりの金額(amount per usage)
	UnitAmount uint64 `json:"unit_amount"`

	// UpperCount 上限値(upper limit)
	UpperCount uint64 `json:"upper_count"`
}

// RecurringInterval 繰り返し期間(cycle)
// month: 月単位(monthly)
// year: 年単位(yearly)
type RecurringInterval string

// SavePricingMenuParam defines model for SavePricingMenuParam.
type SavePricingMenuParam struct {
	// Description メニュー説明(menu description)
	Description string `json:"description"`

	// DisplayName メニュー表示名(menu display name)
	DisplayName string `json:"display_name"`

	// Name メニュー名(menu name)
	Name string `json:"name"`

	// UnitIds 追加するユニットID(unit id to add)
	UnitIds []Uuid `json:"unit_ids"`
}

// SavePricingPlanParam defines model for SavePricingPlanParam.
type SavePricingPlanParam struct {
	// Description 料金プラン説明(pricing plan description)
	Description string `json:"description"`

	// DisplayName 料金プラン表示名(pricing plan display name)
	DisplayName string `json:"display_name"`

	// MenuIds メニューID（料金プランに追加するメニューIDを設定）
	// Menu ID (menu ID to be added to the pricing plan)
	MenuIds []Uuid `json:"menu_ids"`

	// Name 料金プラン名(pricing plan name)
	Name string `json:"name"`
}

// TaxRate defines model for TaxRate.
type TaxRate struct {
	// Country ISO 3166-1 alpha-2 の国コード(Country code of ISO 3166-1 alpha-2)
	Country string `json:"country"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`
	Id          Uuid   `json:"id"`

	// Inclusive 内税かどうか(inclusive or not)
	Inclusive bool `json:"inclusive"`

	// Name 税率の名前(name of tax rate)
	Name string `json:"name"`

	// Percentage 税率(percentage)
	Percentage float64 `json:"percentage"`
}

// TaxRateProps defines model for TaxRateProps.
type TaxRateProps struct {
	// Country ISO 3166-1 alpha-2 の国コード(Country code of ISO 3166-1 alpha-2)
	Country string `json:"country"`

	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`

	// Inclusive 内税かどうか(inclusive or not)
	Inclusive bool `json:"inclusive"`

	// Name 税率の名前(name of tax rate)
	Name string `json:"name"`

	// Percentage 税率(percentage)
	Percentage float64 `json:"percentage"`
}

// TaxRates defines model for TaxRates.
type TaxRates struct {
	TaxRates []TaxRate `json:"tax_rates"`
}

// UnitType 計測単位の種別(unit of measurement type)
// fixed: 固定ユニット(fixed unit)
// usage: 使用量ユニット(usage unit)
// tiered: 段階ユニット(tiered unit)
// tiered_usage: 段階的使用量ユニット(tiered usage unit)
type UnitType string

// UpdateMeteringUnitTimestampCountMethod 更新方法(update method)
// add: 加算(addition)
// sub: 減算(subtraction)
// direct: 上書き(overwrite)
type UpdateMeteringUnitTimestampCountMethod string

// UpdateMeteringUnitTimestampCountNowParam defines model for UpdateMeteringUnitTimestampCountNowParam.
type UpdateMeteringUnitTimestampCountNowParam struct {
	// Count 件数(count)
	Count int `json:"count"`

	// Method 更新方法(update method)
	// add: 加算(addition)
	// sub: 減算(subtraction)
	// direct: 上書き(overwrite)
	Method UpdateMeteringUnitTimestampCountMethod `json:"method"`
}

// UpdateMeteringUnitTimestampCountParam defines model for UpdateMeteringUnitTimestampCountParam.
type UpdateMeteringUnitTimestampCountParam struct {
	// Count 件数(count)
	Count int `json:"count"`

	// Method 更新方法(update method)
	// add: 加算(addition)
	// sub: 減算(subtraction)
	// direct: 上書き(overwrite)
	Method UpdateMeteringUnitTimestampCountMethod `json:"method"`
}

// UpdatePricingMenuParam defines model for UpdatePricingMenuParam.
type UpdatePricingMenuParam = SavePricingMenuParam

// UpdatePricingPlanParam defines model for UpdatePricingPlanParam.
type UpdatePricingPlanParam = SavePricingPlanParam

// UpdatePricingPlansUsedParam defines model for UpdatePricingPlansUsedParam.
type UpdatePricingPlansUsedParam struct {
	PlanIds []Uuid `json:"plan_ids"`
}

// UpdatePricingUnitParam defines model for UpdatePricingUnitParam.
type UpdatePricingUnitParam = PricingUnitForSave

// UpdateTaxRateParam defines model for UpdateTaxRateParam.
type UpdateTaxRateParam struct {
	// Description 説明(description)
	Description string `json:"description"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`
}

// Uuid defines model for Uuid.
type Uuid = string

// DateString defines model for DateString.
type DateString = string

// EndTimestamp defines model for EndTimestamp.
type EndTimestamp = int

// MenuId defines model for MenuId.
type MenuId = Uuid

// MeteringUnitName defines model for MeteringUnitName.
type MeteringUnitName = string

// MonthString defines model for MonthString.
type MonthString = string

// PlanId defines model for PlanId.
type PlanId = Uuid

// PricingUnitId defines model for PricingUnitId.
type PricingUnitId = Uuid

// StartTimestamp defines model for StartTimestamp.
type StartTimestamp = int

// TaxRateId defines model for TaxRateId.
type TaxRateId = Uuid

// TenantId defines model for TenantId.
type TenantId = string

// Timestamp defines model for Timestamp.
type Timestamp = int

// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams defines parameters for GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod.
type GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams struct {
	// StartTimestamp 開始日時(timestamp)
	StartTimestamp *StartTimestamp `form:"start_timestamp,omitempty" json:"start_timestamp,omitempty"`

	// EndTimestamp 終了日時(timestamp)
	EndTimestamp *EndTimestamp `form:"end_timestamp,omitempty" json:"end_timestamp,omitempty"`
}

// CreatePricingMenuJSONRequestBody defines body for CreatePricingMenu for application/json ContentType.
type CreatePricingMenuJSONRequestBody = CreatePricingMenuParam

// UpdatePricingMenuJSONRequestBody defines body for UpdatePricingMenu for application/json ContentType.
type UpdatePricingMenuJSONRequestBody = UpdatePricingMenuParam

// UpdateMeteringUnitTimestampCountNowJSONRequestBody defines body for UpdateMeteringUnitTimestampCountNow for application/json ContentType.
type UpdateMeteringUnitTimestampCountNowJSONRequestBody = UpdateMeteringUnitTimestampCountNowParam

// UpdateMeteringUnitTimestampCountJSONRequestBody defines body for UpdateMeteringUnitTimestampCount for application/json ContentType.
type UpdateMeteringUnitTimestampCountJSONRequestBody = UpdateMeteringUnitTimestampCountParam

// CreatePricingPlanJSONRequestBody defines body for CreatePricingPlan for application/json ContentType.
type CreatePricingPlanJSONRequestBody = CreatePricingPlanParam

// UpdatePricingPlansUsedJSONRequestBody defines body for UpdatePricingPlansUsed for application/json ContentType.
type UpdatePricingPlansUsedJSONRequestBody = UpdatePricingPlansUsedParam

// UpdatePricingPlanJSONRequestBody defines body for UpdatePricingPlan for application/json ContentType.
type UpdatePricingPlanJSONRequestBody = UpdatePricingPlanParam

// CreateTaxRateJSONRequestBody defines body for CreateTaxRate for application/json ContentType.
type CreateTaxRateJSONRequestBody = CreateTaxRateParam

// UpdateTaxRateJSONRequestBody defines body for UpdateTaxRate for application/json ContentType.
type UpdateTaxRateJSONRequestBody = UpdateTaxRateParam

// CreatePricingUnitJSONRequestBody defines body for CreatePricingUnit for application/json ContentType.
type CreatePricingUnitJSONRequestBody = CreatePricingUnitParam

// UpdatePricingUnitJSONRequestBody defines body for UpdatePricingUnit for application/json ContentType.
type UpdatePricingUnitJSONRequestBody = UpdatePricingUnitParam

// AsPricingTieredUsageUnit returns the union data inside the PricingUnit as a PricingTieredUsageUnit
func (t PricingUnit) AsPricingTieredUsageUnit() (PricingTieredUsageUnit, error) {
	var body PricingTieredUsageUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUsageUnit overwrites any union data inside the PricingUnit as the provided PricingTieredUsageUnit
func (t *PricingUnit) FromPricingTieredUsageUnit(v PricingTieredUsageUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUsageUnit performs a merge with any union data inside the PricingUnit, using the provided PricingTieredUsageUnit
func (t *PricingUnit) MergePricingTieredUsageUnit(v PricingTieredUsageUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingTieredUnit returns the union data inside the PricingUnit as a PricingTieredUnit
func (t PricingUnit) AsPricingTieredUnit() (PricingTieredUnit, error) {
	var body PricingTieredUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUnit overwrites any union data inside the PricingUnit as the provided PricingTieredUnit
func (t *PricingUnit) FromPricingTieredUnit(v PricingTieredUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUnit performs a merge with any union data inside the PricingUnit, using the provided PricingTieredUnit
func (t *PricingUnit) MergePricingTieredUnit(v PricingTieredUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingUsageUnit returns the union data inside the PricingUnit as a PricingUsageUnit
func (t PricingUnit) AsPricingUsageUnit() (PricingUsageUnit, error) {
	var body PricingUsageUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingUsageUnit overwrites any union data inside the PricingUnit as the provided PricingUsageUnit
func (t *PricingUnit) FromPricingUsageUnit(v PricingUsageUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingUsageUnit performs a merge with any union data inside the PricingUnit, using the provided PricingUsageUnit
func (t *PricingUnit) MergePricingUsageUnit(v PricingUsageUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingFixedUnit returns the union data inside the PricingUnit as a PricingFixedUnit
func (t PricingUnit) AsPricingFixedUnit() (PricingFixedUnit, error) {
	var body PricingFixedUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingFixedUnit overwrites any union data inside the PricingUnit as the provided PricingFixedUnit
func (t *PricingUnit) FromPricingFixedUnit(v PricingFixedUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingFixedUnit performs a merge with any union data inside the PricingUnit, using the provided PricingFixedUnit
func (t *PricingUnit) MergePricingFixedUnit(v PricingFixedUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PricingUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PricingUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPricingTieredUsageUnitForSave returns the union data inside the PricingUnitForSave as a PricingTieredUsageUnitForSave
func (t PricingUnitForSave) AsPricingTieredUsageUnitForSave() (PricingTieredUsageUnitForSave, error) {
	var body PricingTieredUsageUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUsageUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingTieredUsageUnitForSave
func (t *PricingUnitForSave) FromPricingTieredUsageUnitForSave(v PricingTieredUsageUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUsageUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingTieredUsageUnitForSave
func (t *PricingUnitForSave) MergePricingTieredUsageUnitForSave(v PricingTieredUsageUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingTieredUnitForSave returns the union data inside the PricingUnitForSave as a PricingTieredUnitForSave
func (t PricingUnitForSave) AsPricingTieredUnitForSave() (PricingTieredUnitForSave, error) {
	var body PricingTieredUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingTieredUnitForSave
func (t *PricingUnitForSave) FromPricingTieredUnitForSave(v PricingTieredUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingTieredUnitForSave
func (t *PricingUnitForSave) MergePricingTieredUnitForSave(v PricingTieredUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingUsageUnitForSave returns the union data inside the PricingUnitForSave as a PricingUsageUnitForSave
func (t PricingUnitForSave) AsPricingUsageUnitForSave() (PricingUsageUnitForSave, error) {
	var body PricingUsageUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingUsageUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingUsageUnitForSave
func (t *PricingUnitForSave) FromPricingUsageUnitForSave(v PricingUsageUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingUsageUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingUsageUnitForSave
func (t *PricingUnitForSave) MergePricingUsageUnitForSave(v PricingUsageUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingFixedUnitForSave returns the union data inside the PricingUnitForSave as a PricingFixedUnitForSave
func (t PricingUnitForSave) AsPricingFixedUnitForSave() (PricingFixedUnitForSave, error) {
	var body PricingFixedUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingFixedUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingFixedUnitForSave
func (t *PricingUnitForSave) FromPricingFixedUnitForSave(v PricingFixedUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingFixedUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingFixedUnitForSave
func (t *PricingUnitForSave) MergePricingFixedUnitForSave(v PricingFixedUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PricingUnitForSave) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PricingUnitForSave) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
