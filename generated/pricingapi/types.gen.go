// Package pricingapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package pricingapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AggregateUsage.
const (
	Max AggregateUsage = "max"
	Sum AggregateUsage = "sum"
)

// Defines values for Currency.
const (
	JPY Currency = "JPY"
	USD Currency = "USD"
)

// Defines values for RecurringInterval.
const (
	Month RecurringInterval = "month"
	Year  RecurringInterval = "year"
)

// Defines values for UnitType.
const (
	Fixed       UnitType = "fixed"
	Tiered      UnitType = "tiered"
	TieredUsage UnitType = "tiered_usage"
	Usage       UnitType = "usage"
)

// Defines values for UpdateMeteringUnitTimestampCountMethod.
const (
	Add    UpdateMeteringUnitTimestampCountMethod = "add"
	Direct UpdateMeteringUnitTimestampCountMethod = "direct"
	Sub    UpdateMeteringUnitTimestampCountMethod = "sub"
)

// AggregateUsage Aggregate usage
// sum: Total usage during the period
// max: Maximum usage during the period
type AggregateUsage string

// CreateMeteringUnitParam defines model for CreateMeteringUnitParam.
type CreateMeteringUnitParam = MeteringUnitProps

// CreatePricingMenuParam defines model for CreatePricingMenuParam.
type CreatePricingMenuParam = SavePricingMenuParam

// CreatePricingPlanParam defines model for CreatePricingPlanParam.
type CreatePricingPlanParam = SavePricingPlanParam

// CreatePricingUnitParam defines model for CreatePricingUnitParam.
type CreatePricingUnitParam = PricingUnitForSave

// CreateTaxRateParam defines model for CreateTaxRateParam.
type CreateTaxRateParam = TaxRateProps

// Currency Unit of currency
type Currency string

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`

	// Type Error type
	Type string `json:"type"`
}

// MeteringUnit defines model for MeteringUnit.
type MeteringUnit struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// UnitName Metering unit name
	UnitName string `json:"unit_name"`

	// Used Metering unit used settings
	Used bool `json:"used"`
}

// MeteringUnitCount defines model for MeteringUnitCount.
type MeteringUnitCount struct {
	// Count Count
	Count int `json:"count"`

	// Timestamp Timestamp
	Timestamp int `json:"timestamp"`
}

// MeteringUnitDateCount defines model for MeteringUnitDateCount.
type MeteringUnitDateCount struct {
	// Count Count
	Count int `json:"count"`

	// Date Date
	Date string `json:"date"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`
}

// MeteringUnitDateCounts defines model for MeteringUnitDateCounts.
type MeteringUnitDateCounts struct {
	Counts []MeteringUnitDateCount `json:"counts"`
}

// MeteringUnitDatePeriodCounts defines model for MeteringUnitDatePeriodCounts.
type MeteringUnitDatePeriodCounts struct {
	Counts []MeteringUnitCount `json:"counts"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`
}

// MeteringUnitMonthCount defines model for MeteringUnitMonthCount.
type MeteringUnitMonthCount struct {
	// Count Count
	Count int `json:"count"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Month Month
	Month string `json:"month"`
}

// MeteringUnitMonthCounts defines model for MeteringUnitMonthCounts.
type MeteringUnitMonthCounts struct {
	Counts []MeteringUnitMonthCount `json:"counts"`
}

// MeteringUnitProps defines model for MeteringUnitProps.
type MeteringUnitProps struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display name
	DisplayName string `json:"display_name"`

	// UnitName Metering unit name
	UnitName string `json:"unit_name"`
}

// MeteringUnitTimestampCount defines model for MeteringUnitTimestampCount.
type MeteringUnitTimestampCount struct {
	// Count Count
	Count int `json:"count"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Timestamp Timestamp
	Timestamp int `json:"timestamp"`
}

// MeteringUnits defines model for MeteringUnits.
type MeteringUnits struct {
	Units []MeteringUnit `json:"units"`
}

// PricingFixedUnit defines model for PricingFixedUnit.
type PricingFixedUnit struct {
	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// Name Name
	Name string `json:"name"`

	// RecurringInterval Cycle
	// month: Monthly
	// year: Yearly
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UnitAmount Price
	UnitAmount uint64 `json:"unit_amount"`
	Used       bool   `json:"used"`
}

// PricingFixedUnitForSave defines model for PricingFixedUnitForSave.
type PricingFixedUnitForSave struct {
	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Name Name
	Name string `json:"name"`

	// RecurringInterval Cycle
	// month: Monthly
	// year: Yearly
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UnitAmount Price
	UnitAmount uint64 `json:"unit_amount"`
}

// PricingMenu defines model for PricingMenu.
type PricingMenu struct {
	// Description Menu description
	Description string `json:"description"`

	// DisplayName Menu display name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// Name Menu name
	Name  string        `json:"name"`
	Units []PricingUnit `json:"units"`

	// Used Menu used settings
	Used bool `json:"used"`
}

// PricingMenuProps defines model for PricingMenuProps.
type PricingMenuProps struct {
	// Description Menu description
	Description string `json:"description"`

	// DisplayName Menu display name
	DisplayName string `json:"display_name"`

	// Name Menu name
	Name  string        `json:"name"`
	Units []PricingUnit `json:"units"`

	// Used Menu used settings
	Used bool `json:"used"`
}

// PricingMenus defines model for PricingMenus.
type PricingMenus struct {
	PricingMenus []PricingMenu `json:"pricing_menus"`
}

// PricingPlan defines model for PricingPlan.
type PricingPlan struct {
	// Description Pricing plan description
	Description string `json:"description"`

	// DisplayName Pricing plan display name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// Name Pricing plan name
	Name         string        `json:"name"`
	PricingMenus []PricingMenu `json:"pricing_menus"`

	// Used Pricing plan used settings
	Used bool `json:"used"`
}

// PricingPlanProps defines model for PricingPlanProps.
type PricingPlanProps struct {
	// Description Pricing plan description
	Description string `json:"description"`

	// DisplayName Pricing plan display name
	DisplayName string `json:"display_name"`

	// Name Pricing plan name
	Name         string        `json:"name"`
	PricingMenus []PricingMenu `json:"pricing_menus"`

	// Used Pricing plan used settings
	Used bool `json:"used"`
}

// PricingPlans defines model for PricingPlans.
type PricingPlans struct {
	PricingPlans []PricingPlan `json:"pricing_plans"`
}

// PricingTier defines model for PricingTier.
type PricingTier struct {
	// FlatAmount Fixed amount
	FlatAmount uint64 `json:"flat_amount"`

	// Inf Indefinite
	Inf bool `json:"inf"`

	// UnitAmount Amount per unit
	UnitAmount uint64 `json:"unit_amount"`

	// UpTo Upper limit
	UpTo uint64 `json:"up_to"`
}

// PricingTieredUnit defines model for PricingTieredUnit.
type PricingTieredUnit struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// MeteringUnitId Universally Unique Identifier
	MeteringUnitId Uuid `json:"metering_unit_id"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name string `json:"name"`

	// RecurringInterval Cycle
	// month: Monthly
	// year: Yearly
	RecurringInterval RecurringInterval `json:"recurring_interval"`
	Tiers             []PricingTier     `json:"tiers"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`

	// Used Indicates if the unit is used
	Used bool `json:"used"`
}

// PricingTieredUnitForSave defines model for PricingTieredUnitForSave.
type PricingTieredUnitForSave struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name  string        `json:"name"`
	Tiers []PricingTier `json:"tiers"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`
}

// PricingTieredUsageUnit defines model for PricingTieredUsageUnit.
type PricingTieredUsageUnit struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// MeteringUnitId Universally Unique Identifier
	MeteringUnitId Uuid `json:"metering_unit_id"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name string `json:"name"`

	// RecurringInterval Cycle
	// month: Monthly
	// year: Yearly
	RecurringInterval RecurringInterval `json:"recurring_interval"`
	Tiers             []PricingTier     `json:"tiers"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`

	// Used Indicates if the unit is used
	Used bool `json:"used"`
}

// PricingTieredUsageUnitForSave defines model for PricingTieredUsageUnitForSave.
type PricingTieredUsageUnitForSave struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name  string        `json:"name"`
	Tiers []PricingTier `json:"tiers"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`
}

// PricingTiers defines model for PricingTiers.
type PricingTiers struct {
	Tiers []PricingTier `json:"tiers"`
}

// PricingUnit defines model for PricingUnit.
type PricingUnit struct {
	union json.RawMessage
}

// PricingUnitBaseProps defines model for PricingUnitBaseProps.
type PricingUnitBaseProps struct {
	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Name Name
	Name string `json:"name"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`
}

// PricingUnitForSave defines model for PricingUnitForSave.
type PricingUnitForSave struct {
	union json.RawMessage
}

// PricingUnits defines model for PricingUnits.
type PricingUnits struct {
	Units []PricingUnit `json:"units"`
}

// PricingUsageUnit defines model for PricingUsageUnit.
type PricingUsageUnit struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// MeteringUnitId Universally Unique Identifier
	MeteringUnitId Uuid `json:"metering_unit_id"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name string `json:"name"`

	// RecurringInterval Cycle
	// month: Monthly
	// year: Yearly
	RecurringInterval RecurringInterval `json:"recurring_interval"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UnitAmount Amount per usage
	UnitAmount uint64 `json:"unit_amount"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`
	Used       bool   `json:"used"`
}

// PricingUsageUnitForSave defines model for PricingUsageUnitForSave.
type PricingUsageUnitForSave struct {
	// AggregateUsage Aggregate usage
	// sum: Total usage during the period
	// max: Maximum usage during the period
	AggregateUsage *AggregateUsage `json:"aggregate_usage,omitempty"`

	// Currency Unit of currency
	Currency Currency `json:"currency"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display Name
	DisplayName string `json:"display_name"`

	// MeteringUnitName Metering unit name
	MeteringUnitName string `json:"metering_unit_name"`

	// Name Name
	Name string `json:"name"`

	// Type Unit of measurement type
	// fixed: Fixed unit
	// usage: Usage unit
	// tiered: Tiered unit
	// tiered_usage: Tiered usage unit
	Type UnitType `json:"type"`

	// UnitAmount Amount per usage
	UnitAmount uint64 `json:"unit_amount"`

	// UpperCount Upper limit
	UpperCount uint64 `json:"upper_count"`
}

// RecurringInterval Cycle
// month: Monthly
// year: Yearly
type RecurringInterval string

// SavePricingMenuParam defines model for SavePricingMenuParam.
type SavePricingMenuParam struct {
	// Description Menu description
	Description string `json:"description"`

	// DisplayName Menu display name
	DisplayName string `json:"display_name"`

	// Name Menu name
	Name string `json:"name"`

	// UnitIds Unit IDs to add
	UnitIds []Uuid `json:"unit_ids"`
}

// SavePricingPlanParam defines model for SavePricingPlanParam.
type SavePricingPlanParam struct {
	// Description Pricing plan description
	Description string `json:"description"`

	// DisplayName Pricing plan display name
	DisplayName string `json:"display_name"`

	// MenuIds Menu ID to be added to the pricing plan
	MenuIds []Uuid `json:"menu_ids"`

	// Name Pricing plan name
	Name string `json:"name"`
}

// TaxRate defines model for TaxRate.
type TaxRate struct {
	// Country Country code of ISO 3166-1 alpha-2
	Country string `json:"country"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display name
	DisplayName string `json:"display_name"`

	// Id Universally Unique Identifier
	Id Uuid `json:"id"`

	// Inclusive Inclusive or not
	Inclusive bool `json:"inclusive"`

	// Name Name of tax rate
	Name string `json:"name"`

	// Percentage Percentage
	Percentage float64 `json:"percentage"`
}

// TaxRateProps defines model for TaxRateProps.
type TaxRateProps struct {
	// Country Country code of ISO 3166-1 alpha-2
	Country string `json:"country"`

	// Description Description
	Description string `json:"description"`

	// DisplayName Display name
	DisplayName string `json:"display_name"`

	// Inclusive Inclusive or not
	Inclusive bool `json:"inclusive"`

	// Name Name of tax rate
	Name string `json:"name"`

	// Percentage Percentage
	Percentage float64 `json:"percentage"`
}

// TaxRates defines model for TaxRates.
type TaxRates struct {
	TaxRates []TaxRate `json:"tax_rates"`
}

// UnitType Unit of measurement type
// fixed: Fixed unit
// usage: Usage unit
// tiered: Tiered unit
// tiered_usage: Tiered usage unit
type UnitType string

// UpdateMeteringUnitParam defines model for UpdateMeteringUnitParam.
type UpdateMeteringUnitParam = MeteringUnitProps

// UpdateMeteringUnitTimestampCountMethod Update method
// add: Addition
// sub: Subtraction
// direct: Overwrite
type UpdateMeteringUnitTimestampCountMethod string

// UpdateMeteringUnitTimestampCountNowParam defines model for UpdateMeteringUnitTimestampCountNowParam.
type UpdateMeteringUnitTimestampCountNowParam struct {
	// Count Count
	Count int `json:"count"`

	// Method Update method
	// add: Addition
	// sub: Subtraction
	// direct: Overwrite
	Method UpdateMeteringUnitTimestampCountMethod `json:"method"`
}

// UpdateMeteringUnitTimestampCountParam defines model for UpdateMeteringUnitTimestampCountParam.
type UpdateMeteringUnitTimestampCountParam struct {
	// Count Count
	Count int `json:"count"`

	// Method Update method
	// add: Addition
	// sub: Subtraction
	// direct: Overwrite
	Method UpdateMeteringUnitTimestampCountMethod `json:"method"`
}

// UpdatePricingMenuParam defines model for UpdatePricingMenuParam.
type UpdatePricingMenuParam = SavePricingMenuParam

// UpdatePricingPlanParam defines model for UpdatePricingPlanParam.
type UpdatePricingPlanParam = SavePricingPlanParam

// UpdatePricingPlansUsedParam defines model for UpdatePricingPlansUsedParam.
type UpdatePricingPlansUsedParam struct {
	PlanIds []Uuid `json:"plan_ids"`
}

// UpdatePricingUnitParam defines model for UpdatePricingUnitParam.
type UpdatePricingUnitParam = PricingUnitForSave

// UpdateTaxRateParam defines model for UpdateTaxRateParam.
type UpdateTaxRateParam struct {
	// Description Description
	Description string `json:"description"`

	// DisplayName Display name
	DisplayName string `json:"display_name"`
}

// Uuid Universally Unique Identifier
type Uuid = string

// DateString defines model for DateString.
type DateString = string

// EndTimestamp defines model for EndTimestamp.
type EndTimestamp = int

// MenuId Universally Unique Identifier
type MenuId = Uuid

// MeteringUnitId defines model for MeteringUnitId.
type MeteringUnitId = string

// MeteringUnitName defines model for MeteringUnitName.
type MeteringUnitName = string

// MonthString defines model for MonthString.
type MonthString = string

// PlanId Universally Unique Identifier
type PlanId = Uuid

// PricingUnitId Universally Unique Identifier
type PricingUnitId = Uuid

// StartTimestamp defines model for StartTimestamp.
type StartTimestamp = int

// TaxRateId Universally Unique Identifier
type TaxRateId = Uuid

// TenantId defines model for TenantId.
type TenantId = string

// Timestamp defines model for Timestamp.
type Timestamp = int

// GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams defines parameters for GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriod.
type GetMeteringUnitDateCountByTenantIdAndUnitNameAndDatePeriodParams struct {
	// StartTimestamp Start Date-Time
	StartTimestamp *StartTimestamp `form:"start_timestamp,omitempty" json:"start_timestamp,omitempty"`

	// EndTimestamp End Date-Time
	EndTimestamp *EndTimestamp `form:"end_timestamp,omitempty" json:"end_timestamp,omitempty"`
}

// CreatePricingMenuJSONRequestBody defines body for CreatePricingMenu for application/json ContentType.
type CreatePricingMenuJSONRequestBody = CreatePricingMenuParam

// UpdatePricingMenuJSONRequestBody defines body for UpdatePricingMenu for application/json ContentType.
type UpdatePricingMenuJSONRequestBody = UpdatePricingMenuParam

// UpdateMeteringUnitTimestampCountNowJSONRequestBody defines body for UpdateMeteringUnitTimestampCountNow for application/json ContentType.
type UpdateMeteringUnitTimestampCountNowJSONRequestBody = UpdateMeteringUnitTimestampCountNowParam

// UpdateMeteringUnitTimestampCountJSONRequestBody defines body for UpdateMeteringUnitTimestampCount for application/json ContentType.
type UpdateMeteringUnitTimestampCountJSONRequestBody = UpdateMeteringUnitTimestampCountParam

// CreateMeteringUnitJSONRequestBody defines body for CreateMeteringUnit for application/json ContentType.
type CreateMeteringUnitJSONRequestBody = CreateMeteringUnitParam

// UpdateMeteringUnitByIDJSONRequestBody defines body for UpdateMeteringUnitByID for application/json ContentType.
type UpdateMeteringUnitByIDJSONRequestBody = UpdateMeteringUnitParam

// CreatePricingPlanJSONRequestBody defines body for CreatePricingPlan for application/json ContentType.
type CreatePricingPlanJSONRequestBody = CreatePricingPlanParam

// UpdatePricingPlansUsedJSONRequestBody defines body for UpdatePricingPlansUsed for application/json ContentType.
type UpdatePricingPlansUsedJSONRequestBody = UpdatePricingPlansUsedParam

// UpdatePricingPlanJSONRequestBody defines body for UpdatePricingPlan for application/json ContentType.
type UpdatePricingPlanJSONRequestBody = UpdatePricingPlanParam

// CreateTaxRateJSONRequestBody defines body for CreateTaxRate for application/json ContentType.
type CreateTaxRateJSONRequestBody = CreateTaxRateParam

// UpdateTaxRateJSONRequestBody defines body for UpdateTaxRate for application/json ContentType.
type UpdateTaxRateJSONRequestBody = UpdateTaxRateParam

// CreatePricingUnitJSONRequestBody defines body for CreatePricingUnit for application/json ContentType.
type CreatePricingUnitJSONRequestBody = CreatePricingUnitParam

// UpdatePricingUnitJSONRequestBody defines body for UpdatePricingUnit for application/json ContentType.
type UpdatePricingUnitJSONRequestBody = UpdatePricingUnitParam

// AsPricingTieredUsageUnit returns the union data inside the PricingUnit as a PricingTieredUsageUnit
func (t PricingUnit) AsPricingTieredUsageUnit() (PricingTieredUsageUnit, error) {
	var body PricingTieredUsageUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUsageUnit overwrites any union data inside the PricingUnit as the provided PricingTieredUsageUnit
func (t *PricingUnit) FromPricingTieredUsageUnit(v PricingTieredUsageUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUsageUnit performs a merge with any union data inside the PricingUnit, using the provided PricingTieredUsageUnit
func (t *PricingUnit) MergePricingTieredUsageUnit(v PricingTieredUsageUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingTieredUnit returns the union data inside the PricingUnit as a PricingTieredUnit
func (t PricingUnit) AsPricingTieredUnit() (PricingTieredUnit, error) {
	var body PricingTieredUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUnit overwrites any union data inside the PricingUnit as the provided PricingTieredUnit
func (t *PricingUnit) FromPricingTieredUnit(v PricingTieredUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUnit performs a merge with any union data inside the PricingUnit, using the provided PricingTieredUnit
func (t *PricingUnit) MergePricingTieredUnit(v PricingTieredUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingUsageUnit returns the union data inside the PricingUnit as a PricingUsageUnit
func (t PricingUnit) AsPricingUsageUnit() (PricingUsageUnit, error) {
	var body PricingUsageUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingUsageUnit overwrites any union data inside the PricingUnit as the provided PricingUsageUnit
func (t *PricingUnit) FromPricingUsageUnit(v PricingUsageUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingUsageUnit performs a merge with any union data inside the PricingUnit, using the provided PricingUsageUnit
func (t *PricingUnit) MergePricingUsageUnit(v PricingUsageUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingFixedUnit returns the union data inside the PricingUnit as a PricingFixedUnit
func (t PricingUnit) AsPricingFixedUnit() (PricingFixedUnit, error) {
	var body PricingFixedUnit
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingFixedUnit overwrites any union data inside the PricingUnit as the provided PricingFixedUnit
func (t *PricingUnit) FromPricingFixedUnit(v PricingFixedUnit) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingFixedUnit performs a merge with any union data inside the PricingUnit, using the provided PricingFixedUnit
func (t *PricingUnit) MergePricingFixedUnit(v PricingFixedUnit) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PricingUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PricingUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPricingTieredUsageUnitForSave returns the union data inside the PricingUnitForSave as a PricingTieredUsageUnitForSave
func (t PricingUnitForSave) AsPricingTieredUsageUnitForSave() (PricingTieredUsageUnitForSave, error) {
	var body PricingTieredUsageUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUsageUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingTieredUsageUnitForSave
func (t *PricingUnitForSave) FromPricingTieredUsageUnitForSave(v PricingTieredUsageUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUsageUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingTieredUsageUnitForSave
func (t *PricingUnitForSave) MergePricingTieredUsageUnitForSave(v PricingTieredUsageUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingTieredUnitForSave returns the union data inside the PricingUnitForSave as a PricingTieredUnitForSave
func (t PricingUnitForSave) AsPricingTieredUnitForSave() (PricingTieredUnitForSave, error) {
	var body PricingTieredUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingTieredUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingTieredUnitForSave
func (t *PricingUnitForSave) FromPricingTieredUnitForSave(v PricingTieredUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingTieredUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingTieredUnitForSave
func (t *PricingUnitForSave) MergePricingTieredUnitForSave(v PricingTieredUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingUsageUnitForSave returns the union data inside the PricingUnitForSave as a PricingUsageUnitForSave
func (t PricingUnitForSave) AsPricingUsageUnitForSave() (PricingUsageUnitForSave, error) {
	var body PricingUsageUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingUsageUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingUsageUnitForSave
func (t *PricingUnitForSave) FromPricingUsageUnitForSave(v PricingUsageUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingUsageUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingUsageUnitForSave
func (t *PricingUnitForSave) MergePricingUsageUnitForSave(v PricingUsageUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsPricingFixedUnitForSave returns the union data inside the PricingUnitForSave as a PricingFixedUnitForSave
func (t PricingUnitForSave) AsPricingFixedUnitForSave() (PricingFixedUnitForSave, error) {
	var body PricingFixedUnitForSave
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPricingFixedUnitForSave overwrites any union data inside the PricingUnitForSave as the provided PricingFixedUnitForSave
func (t *PricingUnitForSave) FromPricingFixedUnitForSave(v PricingFixedUnitForSave) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePricingFixedUnitForSave performs a merge with any union data inside the PricingUnitForSave, using the provided PricingFixedUnitForSave
func (t *PricingUnitForSave) MergePricingFixedUnitForSave(v PricingFixedUnitForSave) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t PricingUnitForSave) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PricingUnitForSave) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
