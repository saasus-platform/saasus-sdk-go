// Package communicationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package communicationapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReturnInternalServerError request
	ReturnInternalServerError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedbacks request
	GetFeedbacks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeedback request with any body
	CreateFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeedback(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeedback request
	DeleteFeedback(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedback request
	GetFeedback(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeedback request with any body
	UpdateFeedbackWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeedback(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeedbackComment request with any body
	CreateFeedbackCommentWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeedbackComment(ctx context.Context, feedbackId FeedbackId, body CreateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeedbackComment request
	DeleteFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedbackComment request
	GetFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeedbackComment request with any body
	UpdateFeedbackCommentWithBody(ctx context.Context, feedbackId FeedbackId, commentId CommentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, body UpdateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFeedbackStatus request with any body
	UpdateFeedbackStatusWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFeedbackStatus(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateVoteUser request with any body
	CreateVoteUserWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateVoteUser(ctx context.Context, feedbackId FeedbackId, body CreateVoteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteVoteForFeedback request
	DeleteVoteForFeedback(ctx context.Context, feedbackId FeedbackId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReturnInternalServerError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReturnInternalServerErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedbacks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedbacksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedback(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeedback(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeedbackRequest(c.Server, feedbackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedback(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedbackRequest(c.Server, feedbackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackRequestWithBody(c.Server, feedbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedback(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackRequest(c.Server, feedbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedbackCommentWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackCommentRequestWithBody(c.Server, feedbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeedbackComment(ctx context.Context, feedbackId FeedbackId, body CreateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeedbackCommentRequest(c.Server, feedbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeedbackCommentRequest(c.Server, feedbackId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedbackCommentRequest(c.Server, feedbackId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackCommentWithBody(ctx context.Context, feedbackId FeedbackId, commentId CommentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackCommentRequestWithBody(c.Server, feedbackId, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackComment(ctx context.Context, feedbackId FeedbackId, commentId CommentId, body UpdateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackCommentRequest(c.Server, feedbackId, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackStatusWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackStatusRequestWithBody(c.Server, feedbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFeedbackStatus(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFeedbackStatusRequest(c.Server, feedbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVoteUserWithBody(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVoteUserRequestWithBody(c.Server, feedbackId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateVoteUser(ctx context.Context, feedbackId FeedbackId, body CreateVoteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateVoteUserRequest(c.Server, feedbackId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteVoteForFeedback(ctx context.Context, feedbackId FeedbackId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteVoteForFeedbackRequest(c.Server, feedbackId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReturnInternalServerErrorRequest generates requests for ReturnInternalServerError
func NewReturnInternalServerErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/errors/internal-server-error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedbacksRequest generates requests for GetFeedbacks
func NewGetFeedbacksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFeedbackRequest calls the generic CreateFeedback builder with application/json body
func NewCreateFeedbackRequest(server string, body CreateFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFeedbackRequestWithBody generates requests for CreateFeedback with any type of body
func NewCreateFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeedbackRequest generates requests for DeleteFeedback
func NewDeleteFeedbackRequest(server string, feedbackId FeedbackId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedbackRequest generates requests for GetFeedback
func NewGetFeedbackRequest(server string, feedbackId FeedbackId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFeedbackRequest calls the generic UpdateFeedback builder with application/json body
func NewUpdateFeedbackRequest(server string, feedbackId FeedbackId, body UpdateFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeedbackRequestWithBody(server, feedbackId, "application/json", bodyReader)
}

// NewUpdateFeedbackRequestWithBody generates requests for UpdateFeedback with any type of body
func NewUpdateFeedbackRequestWithBody(server string, feedbackId FeedbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateFeedbackCommentRequest calls the generic CreateFeedbackComment builder with application/json body
func NewCreateFeedbackCommentRequest(server string, feedbackId FeedbackId, body CreateFeedbackCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeedbackCommentRequestWithBody(server, feedbackId, "application/json", bodyReader)
}

// NewCreateFeedbackCommentRequestWithBody generates requests for CreateFeedbackComment with any type of body
func NewCreateFeedbackCommentRequestWithBody(server string, feedbackId FeedbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/comments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeedbackCommentRequest generates requests for DeleteFeedbackComment
func NewDeleteFeedbackCommentRequest(server string, feedbackId FeedbackId, commentId CommentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedbackCommentRequest generates requests for GetFeedbackComment
func NewGetFeedbackCommentRequest(server string, feedbackId FeedbackId, commentId CommentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFeedbackCommentRequest calls the generic UpdateFeedbackComment builder with application/json body
func NewUpdateFeedbackCommentRequest(server string, feedbackId FeedbackId, commentId CommentId, body UpdateFeedbackCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeedbackCommentRequestWithBody(server, feedbackId, commentId, "application/json", bodyReader)
}

// NewUpdateFeedbackCommentRequestWithBody generates requests for UpdateFeedbackComment with any type of body
func NewUpdateFeedbackCommentRequestWithBody(server string, feedbackId FeedbackId, commentId CommentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/comments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateFeedbackStatusRequest calls the generic UpdateFeedbackStatus builder with application/json body
func NewUpdateFeedbackStatusRequest(server string, feedbackId FeedbackId, body UpdateFeedbackStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFeedbackStatusRequestWithBody(server, feedbackId, "application/json", bodyReader)
}

// NewUpdateFeedbackStatusRequestWithBody generates requests for UpdateFeedbackStatus with any type of body
func NewUpdateFeedbackStatusRequestWithBody(server string, feedbackId FeedbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateVoteUserRequest calls the generic CreateVoteUser builder with application/json body
func NewCreateVoteUserRequest(server string, feedbackId FeedbackId, body CreateVoteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateVoteUserRequestWithBody(server, feedbackId, "application/json", bodyReader)
}

// NewCreateVoteUserRequestWithBody generates requests for CreateVoteUser with any type of body
func NewCreateVoteUserRequestWithBody(server string, feedbackId FeedbackId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/votes/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteVoteForFeedbackRequest generates requests for DeleteVoteForFeedback
func NewDeleteVoteForFeedbackRequest(server string, feedbackId FeedbackId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "feedback_id", runtime.ParamLocationPath, feedbackId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feedbacks/%s/votes/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReturnInternalServerError request
	ReturnInternalServerErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReturnInternalServerErrorResponse, error)

	// GetFeedbacks request
	GetFeedbacksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeedbacksResponse, error)

	// CreateFeedback request with any body
	CreateFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error)

	CreateFeedbackWithResponse(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error)

	// DeleteFeedback request
	DeleteFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*DeleteFeedbackResponse, error)

	// GetFeedback request
	GetFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*GetFeedbackResponse, error)

	// UpdateFeedback request with any body
	UpdateFeedbackWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error)

	UpdateFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error)

	// CreateFeedbackComment request with any body
	CreateFeedbackCommentWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackCommentResponse, error)

	CreateFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, body CreateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackCommentResponse, error)

	// DeleteFeedbackComment request
	DeleteFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*DeleteFeedbackCommentResponse, error)

	// GetFeedbackComment request
	GetFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*GetFeedbackCommentResponse, error)

	// UpdateFeedbackComment request with any body
	UpdateFeedbackCommentWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackCommentResponse, error)

	UpdateFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, body UpdateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackCommentResponse, error)

	// UpdateFeedbackStatus request with any body
	UpdateFeedbackStatusWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackStatusResponse, error)

	UpdateFeedbackStatusWithResponse(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackStatusResponse, error)

	// CreateVoteUser request with any body
	CreateVoteUserWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVoteUserResponse, error)

	CreateVoteUserWithResponse(ctx context.Context, feedbackId FeedbackId, body CreateVoteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVoteUserResponse, error)

	// DeleteVoteForFeedback request
	DeleteVoteForFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteVoteForFeedbackResponse, error)
}

type ReturnInternalServerErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ReturnInternalServerErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReturnInternalServerErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedbacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Feedbacks
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeedbacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedbacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Feedback
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Feedback
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeedbackCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Comment
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateFeedbackCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeedbackCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeedbackCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteFeedbackCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeedbackCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedbackCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Comment
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetFeedbackCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedbackCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeedbackCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFeedbackCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeedbackCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFeedbackStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateFeedbackStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFeedbackStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateVoteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Votes
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r CreateVoteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateVoteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteVoteForFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteVoteForFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteVoteForFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReturnInternalServerErrorWithResponse request returning *ReturnInternalServerErrorResponse
func (c *ClientWithResponses) ReturnInternalServerErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReturnInternalServerErrorResponse, error) {
	rsp, err := c.ReturnInternalServerError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReturnInternalServerErrorResponse(rsp)
}

// GetFeedbacksWithResponse request returning *GetFeedbacksResponse
func (c *ClientWithResponses) GetFeedbacksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeedbacksResponse, error) {
	rsp, err := c.GetFeedbacks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedbacksResponse(rsp)
}

// CreateFeedbackWithBodyWithResponse request with arbitrary body returning *CreateFeedbackResponse
func (c *ClientWithResponses) CreateFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error) {
	rsp, err := c.CreateFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackResponse(rsp)
}

func (c *ClientWithResponses) CreateFeedbackWithResponse(ctx context.Context, body CreateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackResponse, error) {
	rsp, err := c.CreateFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackResponse(rsp)
}

// DeleteFeedbackWithResponse request returning *DeleteFeedbackResponse
func (c *ClientWithResponses) DeleteFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*DeleteFeedbackResponse, error) {
	rsp, err := c.DeleteFeedback(ctx, feedbackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeedbackResponse(rsp)
}

// GetFeedbackWithResponse request returning *GetFeedbackResponse
func (c *ClientWithResponses) GetFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, reqEditors ...RequestEditorFn) (*GetFeedbackResponse, error) {
	rsp, err := c.GetFeedback(ctx, feedbackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedbackResponse(rsp)
}

// UpdateFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateFeedbackResponse
func (c *ClientWithResponses) UpdateFeedbackWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error) {
	rsp, err := c.UpdateFeedbackWithBody(ctx, feedbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackResponse, error) {
	rsp, err := c.UpdateFeedback(ctx, feedbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackResponse(rsp)
}

// CreateFeedbackCommentWithBodyWithResponse request with arbitrary body returning *CreateFeedbackCommentResponse
func (c *ClientWithResponses) CreateFeedbackCommentWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeedbackCommentResponse, error) {
	rsp, err := c.CreateFeedbackCommentWithBody(ctx, feedbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackCommentResponse(rsp)
}

func (c *ClientWithResponses) CreateFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, body CreateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeedbackCommentResponse, error) {
	rsp, err := c.CreateFeedbackComment(ctx, feedbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeedbackCommentResponse(rsp)
}

// DeleteFeedbackCommentWithResponse request returning *DeleteFeedbackCommentResponse
func (c *ClientWithResponses) DeleteFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*DeleteFeedbackCommentResponse, error) {
	rsp, err := c.DeleteFeedbackComment(ctx, feedbackId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeedbackCommentResponse(rsp)
}

// GetFeedbackCommentWithResponse request returning *GetFeedbackCommentResponse
func (c *ClientWithResponses) GetFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, reqEditors ...RequestEditorFn) (*GetFeedbackCommentResponse, error) {
	rsp, err := c.GetFeedbackComment(ctx, feedbackId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedbackCommentResponse(rsp)
}

// UpdateFeedbackCommentWithBodyWithResponse request with arbitrary body returning *UpdateFeedbackCommentResponse
func (c *ClientWithResponses) UpdateFeedbackCommentWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackCommentResponse, error) {
	rsp, err := c.UpdateFeedbackCommentWithBody(ctx, feedbackId, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackCommentResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeedbackCommentWithResponse(ctx context.Context, feedbackId FeedbackId, commentId CommentId, body UpdateFeedbackCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackCommentResponse, error) {
	rsp, err := c.UpdateFeedbackComment(ctx, feedbackId, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackCommentResponse(rsp)
}

// UpdateFeedbackStatusWithBodyWithResponse request with arbitrary body returning *UpdateFeedbackStatusResponse
func (c *ClientWithResponses) UpdateFeedbackStatusWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFeedbackStatusResponse, error) {
	rsp, err := c.UpdateFeedbackStatusWithBody(ctx, feedbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateFeedbackStatusWithResponse(ctx context.Context, feedbackId FeedbackId, body UpdateFeedbackStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFeedbackStatusResponse, error) {
	rsp, err := c.UpdateFeedbackStatus(ctx, feedbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFeedbackStatusResponse(rsp)
}

// CreateVoteUserWithBodyWithResponse request with arbitrary body returning *CreateVoteUserResponse
func (c *ClientWithResponses) CreateVoteUserWithBodyWithResponse(ctx context.Context, feedbackId FeedbackId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateVoteUserResponse, error) {
	rsp, err := c.CreateVoteUserWithBody(ctx, feedbackId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVoteUserResponse(rsp)
}

func (c *ClientWithResponses) CreateVoteUserWithResponse(ctx context.Context, feedbackId FeedbackId, body CreateVoteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateVoteUserResponse, error) {
	rsp, err := c.CreateVoteUser(ctx, feedbackId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateVoteUserResponse(rsp)
}

// DeleteVoteForFeedbackWithResponse request returning *DeleteVoteForFeedbackResponse
func (c *ClientWithResponses) DeleteVoteForFeedbackWithResponse(ctx context.Context, feedbackId FeedbackId, userId UserId, reqEditors ...RequestEditorFn) (*DeleteVoteForFeedbackResponse, error) {
	rsp, err := c.DeleteVoteForFeedback(ctx, feedbackId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteVoteForFeedbackResponse(rsp)
}

// ParseReturnInternalServerErrorResponse parses an HTTP response from a ReturnInternalServerErrorWithResponse call
func ParseReturnInternalServerErrorResponse(rsp *http.Response) (*ReturnInternalServerErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReturnInternalServerErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeedbacksResponse parses an HTTP response from a GetFeedbacksWithResponse call
func ParseGetFeedbacksResponse(rsp *http.Response) (*GetFeedbacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedbacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Feedbacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateFeedbackResponse parses an HTTP response from a CreateFeedbackWithResponse call
func ParseCreateFeedbackResponse(rsp *http.Response) (*CreateFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Feedback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFeedbackResponse parses an HTTP response from a DeleteFeedbackWithResponse call
func ParseDeleteFeedbackResponse(rsp *http.Response) (*DeleteFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeedbackResponse parses an HTTP response from a GetFeedbackWithResponse call
func ParseGetFeedbackResponse(rsp *http.Response) (*GetFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Feedback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFeedbackResponse parses an HTTP response from a UpdateFeedbackWithResponse call
func ParseUpdateFeedbackResponse(rsp *http.Response) (*UpdateFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateFeedbackCommentResponse parses an HTTP response from a CreateFeedbackCommentWithResponse call
func ParseCreateFeedbackCommentResponse(rsp *http.Response) (*CreateFeedbackCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeedbackCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteFeedbackCommentResponse parses an HTTP response from a DeleteFeedbackCommentWithResponse call
func ParseDeleteFeedbackCommentResponse(rsp *http.Response) (*DeleteFeedbackCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeedbackCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeedbackCommentResponse parses an HTTP response from a GetFeedbackCommentWithResponse call
func ParseGetFeedbackCommentResponse(rsp *http.Response) (*GetFeedbackCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedbackCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Comment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFeedbackCommentResponse parses an HTTP response from a UpdateFeedbackCommentWithResponse call
func ParseUpdateFeedbackCommentResponse(rsp *http.Response) (*UpdateFeedbackCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeedbackCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFeedbackStatusResponse parses an HTTP response from a UpdateFeedbackStatusWithResponse call
func ParseUpdateFeedbackStatusResponse(rsp *http.Response) (*UpdateFeedbackStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFeedbackStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateVoteUserResponse parses an HTTP response from a CreateVoteUserWithResponse call
func ParseCreateVoteUserResponse(rsp *http.Response) (*CreateVoteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateVoteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Votes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteVoteForFeedbackResponse parses an HTTP response from a DeleteVoteForFeedbackWithResponse call
func ParseDeleteVoteForFeedbackResponse(rsp *http.Response) (*DeleteVoteForFeedbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteVoteForFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
