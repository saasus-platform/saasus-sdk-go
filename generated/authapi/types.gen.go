// Package authapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package authapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for AccountVerificationSendingTo.
const (
	Email      AccountVerificationSendingTo = "email"
	Sms        AccountVerificationSendingTo = "sms"
	SmsOrEmail AccountVerificationSendingTo = "smsOrEmail"
)

// Defines values for AccountVerificationVerificationMethod.
const (
	AccountVerificationVerificationMethodCode AccountVerificationVerificationMethod = "code"
	AccountVerificationVerificationMethodLink AccountVerificationVerificationMethod = "link"
)

// Defines values for AttributeType.
const (
	Bool   AttributeType = "bool"
	Date   AttributeType = "date"
	Number AttributeType = "number"
	String AttributeType = "string"
)

// Defines values for DeviceConfigurationDeviceRemembering.
const (
	Always    DeviceConfigurationDeviceRemembering = "always"
	No        DeviceConfigurationDeviceRemembering = "no"
	UserOptIn DeviceConfigurationDeviceRemembering = "userOptIn"
)

// Defines values for DnsRecordType.
const (
	CNAME DnsRecordType = "CNAME"
)

// Defines values for InvitationStatus.
const (
	Accepted InvitationStatus = "accepted"
	Expired  InvitationStatus = "expired"
	Pending  InvitationStatus = "pending"
)

// Defines values for InvoiceLanguage.
const (
	EnUS InvoiceLanguage = "en-US"
	JaJP InvoiceLanguage = "ja-JP"
)

// Defines values for MfaConfigurationMfaConfiguration.
const (
	On       MfaConfigurationMfaConfiguration = "on"
	Optional MfaConfigurationMfaConfiguration = "optional"
)

// Defines values for MfaPreferenceMethod.
const (
	SoftwareToken MfaPreferenceMethod = "softwareToken"
)

// Defines values for ProrationBehavior.
const (
	AlwaysInvoice    ProrationBehavior = "always_invoice"
	CreateProrations ProrationBehavior = "create_prorations"
	None             ProrationBehavior = "none"
)

// Defines values for ProviderName.
const (
	Google ProviderName = "Google"
)

// Defines values for ProviderType.
const (
	SAML ProviderType = "SAML"
)

// Defines values for AuthFlow.
const (
	AuthFlowRefreshTokenAuth AuthFlow = "refreshTokenAuth"
	AuthFlowTempCodeAuth     AuthFlow = "tempCodeAuth"
)

// Defines values for GetAuthCredentialsParamsAuthFlow.
const (
	GetAuthCredentialsParamsAuthFlowRefreshTokenAuth GetAuthCredentialsParamsAuthFlow = "refreshTokenAuth"
	GetAuthCredentialsParamsAuthFlowTempCodeAuth     GetAuthCredentialsParamsAuthFlow = "tempCodeAuth"
)

// AccountVerification アカウント認証設定(account authentication settings)
// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
type AccountVerification struct {
	// SendingTo email: Eメール(e-mail)
	// sms: SMS
	// smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible)
	SendingTo AccountVerificationSendingTo `json:"sending_to"`

	// VerificationMethod code: 検証コード(verification code)
	// link: 検証リンク(verification link)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	VerificationMethod AccountVerificationVerificationMethod `json:"verification_method"`
}

// AccountVerificationSendingTo email: Eメール(e-mail)
// sms: SMS
// smsOrEmail: SMS不可の場合にEメール(email if SMS is not possible)
type AccountVerificationSendingTo string

// AccountVerificationVerificationMethod code: 検証コード(verification code)
// link: 検証リンク(verification link)
// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
type AccountVerificationVerificationMethod string

// ApiKeys defines model for ApiKeys.
type ApiKeys struct {
	// ApiKeys APIキー(API Key)
	ApiKeys []string `json:"api_keys"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	// AttributeName 属性名(attribute name)
	AttributeName string `json:"attribute_name"`

	// AttributeType 型（dateはYYYY-MM-DDの形式で使用する事ができます。）
	// (Type (date can be set to YYYY-MM-DD format.))
	AttributeType AttributeType `json:"attribute_type"`

	// DisplayName 表示名(display name)
	DisplayName string `json:"display_name"`
}

// AttributeType 型（dateはYYYY-MM-DDの形式で使用する事ができます。）
// (Type (date can be set to YYYY-MM-DD format.))
type AttributeType string

// AuthInfo defines model for AuthInfo.
type AuthInfo struct {
	// CallbackUrl 認証後遷移先(Redirect After Authentication)
	CallbackUrl string `json:"callback_url"`
}

// AuthorizationTempCode defines model for AuthorizationTempCode.
type AuthorizationTempCode struct {
	Code Uuid `json:"code"`
}

// BasicInfo defines model for BasicInfo.
type BasicInfo struct {
	CertificateDnsRecord DnsRecord `json:"certificate_dns_record"`
	CloudFrontDnsRecord  DnsRecord `json:"cloud_front_dns_record"`

	// DefaultDomainName デフォルトドメイン名(Default Domain Name)
	DefaultDomainName string `json:"default_domain_name"`

	// DkimDnsRecords DKIM DNS レコード(DKIM DNS Records)
	DkimDnsRecords []DnsRecord `json:"dkim_dns_records"`

	// DomainName ドメイン名(Domain Name)
	DomainName string `json:"domain_name"`

	// FromEmailAddress 認証メールの送信元メールアドレス(Sender Email for Authentication Email)
	FromEmailAddress string `json:"from_email_address"`

	// IsDnsValidated DNSレコードの検証結果(DNS Record Verification Results)
	IsDnsValidated bool `json:"is_dns_validated"`

	// IsSesSandboxGranted SESのサンドボックス解除及びCognitoのSES設定結果(SES sandbox release and Cognito SES configuration results)
	IsSesSandboxGranted bool `json:"is_ses_sandbox_granted"`

	// ReplyEmailAddress 認証メールの返信元メールアドレス(Reply-from email address of authentication email)
	ReplyEmailAddress string `json:"reply_email_address"`
}

// BillingAddress defines model for BillingAddress.
type BillingAddress struct {
	// AdditionalAddressInfo 建物名・部屋番号などの住所に関する追加情報
	//
	// Additional information about the address, such as a building name, floor, or department name.
	AdditionalAddressInfo *string `json:"additional_address_info,omitempty"`

	// City 住所の市区町村
	//
	// City, district, suburb, town, or village.
	City string `json:"city"`

	// Country 住所の国を ISO 3166-1 alpha-2 コードで指定します。
	//
	// Country of the address using ISO 3166-1 alpha-2 code.
	Country string `json:"country"`

	// PostalCode 郵便番号
	//
	// ZIP or postal code.
	PostalCode string `json:"postal_code"`

	// State 住所の都道府県または州
	//
	// State name or abbreviation.
	State string `json:"state"`

	// Street 住所の通りの名前や番地を含めた部分
	//
	// Street address, apartment or suite number.
	Street string `json:"street"`
}

// BillingInfo defines model for BillingInfo.
type BillingInfo struct {
	Address BillingAddress `json:"address"`

	// InvoiceLanguage 請求書の言語
	//
	// Language of invoice
	InvoiceLanguage InvoiceLanguage `json:"invoice_language"`

	// Name 請求用のテナント名
	//
	// Tenant name for billing
	Name string `json:"name"`
}

// ClientSecret defines model for ClientSecret.
type ClientSecret struct {
	// ClientSecret クライアントシークレット(client secret)
	ClientSecret string `json:"client_secret"`
}

// ConfirmEmailUpdateParam defines model for ConfirmEmailUpdateParam.
type ConfirmEmailUpdateParam struct {
	AccessToken string `json:"access_token"`
	Code        string `json:"code"`
}

// ConfirmExternalUserLinkParam defines model for ConfirmExternalUserLinkParam.
type ConfirmExternalUserLinkParam struct {
	AccessToken string `json:"access_token"`
	Code        string `json:"code"`
}

// ConfirmSignUpWithAwsMarketplaceParam defines model for ConfirmSignUpWithAwsMarketplaceParam.
type ConfirmSignUpWithAwsMarketplaceParam struct {
	// AccessToken アクセストークン(access token)
	AccessToken string `json:"access_token"`

	// RegistrationToken Registration Token
	RegistrationToken string `json:"registration_token"`

	// TenantName テナント名(tenant name)
	TenantName *string `json:"tenant_name,omitempty"`
}

// CreateAuthCredentialsParam defines model for CreateAuthCredentialsParam.
type CreateAuthCredentialsParam = Credentials

// CreateEnvParam 環境情報(env info)
type CreateEnvParam = Env

// CreateRoleParam 役割(ロール)情報(role info)
type CreateRoleParam = Role

// CreateSaasUserParam defines model for CreateSaasUserParam.
type CreateSaasUserParam struct {
	// Email メールアドレス(E-mail)
	Email string `json:"email"`

	// Password パスワード(Password)
	Password string `json:"password"`
}

// CreateSecretCodeParam defines model for CreateSecretCodeParam.
type CreateSecretCodeParam struct {
	// AccessToken アクセストークン(access token)
	AccessToken string `json:"access_token"`
}

// CreateTenantAttributeParam defines model for CreateTenantAttributeParam.
type CreateTenantAttributeParam = Attribute

// CreateTenantInvitationParam defines model for CreateTenantInvitationParam.
type CreateTenantInvitationParam struct {
	// AccessToken 招待を作成するユーザーのアクセストークン(access token of the user who creates an invitation)
	AccessToken string `json:"access_token"`

	// Email 招待するユーザーのメールアドレス(email address of the user to be invited)
	Email string `json:"email"`
	Envs  []struct {
		Id Id `json:"id"`

		// RoleNames 役割名(role name)
		RoleNames []string `json:"role_names"`
	} `json:"envs"`
}

// CreateTenantParam defines model for CreateTenantParam.
type CreateTenantParam = TenantProps

// CreateTenantUserParam defines model for CreateTenantUserParam.
type CreateTenantUserParam struct {
	// Attributes 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）
	//
	// Attribute information (Get information set by defining user attributes in the SaaS development console)
	Attributes map[string]interface{} `json:"attributes"`

	// Email メールアドレス(e-mail)
	Email string `json:"email"`
}

// CreateTenantUserRolesParam defines model for CreateTenantUserRolesParam.
type CreateTenantUserRolesParam struct {
	// RoleNames 役割(ロール)情報(Role Info)
	RoleNames []string `json:"role_names"`
}

// CreateUserAttributeParam defines model for CreateUserAttributeParam.
type CreateUserAttributeParam = Attribute

// Credentials defines model for Credentials.
type Credentials struct {
	// AccessToken アクセストークン(access token)
	AccessToken string `json:"access_token"`

	// IdToken IDトークン(ID token)
	IdToken string `json:"id_token"`

	// RefreshToken リフレッシュトークン(refresh token)
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// CustomizePageProps defines model for CustomizePageProps.
type CustomizePageProps struct {
	// HtmlContents 画面のHTMLを編集できます
	// ※ 未提供の機能のため、変更・保存はできません
	//
	// Edit page HTML
	// ※ This function is not yet provided, so it cannot be changed or saved.
	HtmlContents string `json:"html_contents"`

	// IsPrivacyPolicy プライバシーポリシーチェックボックスを表示するが設定されているか(show the privacy policy checkbox)
	IsPrivacyPolicy bool `json:"is_privacy_policy"`

	// IsTermsOfService 利用規約の同意チェックボックスを表示するが設定されているか(display the terms of use agreement check box)
	IsTermsOfService bool `json:"is_terms_of_service"`
}

// CustomizePageSettings defines model for CustomizePageSettings.
type CustomizePageSettings struct {
	// Favicon ファビコン(favicon)
	Favicon string `json:"favicon"`

	// GoogleTagManagerContainerId Google Tag Manager コンテナ ID(Google Tag Manager container ID)
	GoogleTagManagerContainerId string `json:"google_tag_manager_container_id"`

	// Icon サービスアイコン(service icon)
	Icon string `json:"icon"`

	// PrivacyPolicyUrl プライバシーポリシーURL(privacy policy URL)
	PrivacyPolicyUrl string `json:"privacy_policy_url"`

	// TermsOfServiceUrl 利用規約URL(terms of service URL)
	TermsOfServiceUrl string `json:"terms_of_service_url"`

	// Title サービス名(service name)
	Title string `json:"title"`
}

// CustomizePageSettingsProps defines model for CustomizePageSettingsProps.
type CustomizePageSettingsProps struct {
	// GoogleTagManagerContainerId Google Tag Manager コンテナ ID(Google Tag Manager container ID)
	GoogleTagManagerContainerId string `json:"google_tag_manager_container_id"`

	// PrivacyPolicyUrl プライバシーポリシーURL(privacy policy URL)
	PrivacyPolicyUrl string `json:"privacy_policy_url"`

	// TermsOfServiceUrl 利用規約URL(terms of service URL)
	TermsOfServiceUrl string `json:"terms_of_service_url"`

	// Title サービス名(service name)
	Title string `json:"title"`
}

// CustomizePages defines model for CustomizePages.
type CustomizePages struct {
	PasswordResetPage CustomizePageProps `json:"password_reset_page"`
	SignInPage        CustomizePageProps `json:"sign_in_page"`
	SignUpPage        CustomizePageProps `json:"sign_up_page"`
}

// DeleteUsage stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。
// プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。
// 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。
//
// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans.
// When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items.
// The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
type DeleteUsage = bool

// DeviceConfiguration 信頼済みデバイスの記憶の設定(settings for remembering trusted devices)
type DeviceConfiguration struct {
	// DeviceRemembering always: 常に記憶する(always remember)
	// userOptIn: ユーザーオプトイン(user opt-in)
	// no: (don't save)
	DeviceRemembering DeviceConfigurationDeviceRemembering `json:"device_remembering"`
}

// DeviceConfigurationDeviceRemembering always: 常に記憶する(always remember)
// userOptIn: ユーザーオプトイン(user opt-in)
// no: (don't save)
type DeviceConfigurationDeviceRemembering string

// DnsRecord defines model for DnsRecord.
type DnsRecord struct {
	// Name レコード名(Record Name)
	Name string `json:"name"`

	// Type CNAMEリソースレコード(CNAME Resource Record)
	Type DnsRecordType `json:"type"`

	// Value 値(Value)
	Value string `json:"value"`
}

// DnsRecordType CNAMEリソースレコード(CNAME Resource Record)
type DnsRecordType string

// Env 環境情報(env info)
type Env struct {
	// DisplayName 環境表示名(env display name)
	DisplayName *string `json:"display_name,omitempty"`
	Id          Id      `json:"id"`

	// Name 環境名(env name)
	Name string `json:"name"`
}

// Envs env一覧(env list)
type Envs struct {
	Envs []Env `json:"envs"`
}

// Error defines model for Error.
type Error struct {
	Data *map[string]interface{} `json:"data,omitempty"`

	// Message Error message
	Message string `json:"message"`

	// Type permission_denied
	Type string `json:"type"`
}

// Id defines model for Id.
type Id = uint64

// IdentityProviderConfiguration 外部IDプロバイダを利用したサインインの設定をするために必要な情報です。(This information is required to set up sign-in using an external identity provider.)
// 変更はできません。(It cannot be changed.)
type IdentityProviderConfiguration struct {
	// Domain ドメイン(domain)
	Domain string `json:"domain"`

	// EntityId 識別子(entity ID)
	EntityId string `json:"entity_id"`

	// RedirectUrl リダイレクトURL(redirect URL)
	RedirectUrl string `json:"redirect_url"`

	// ReplyUrl 応答URL(reply URL)
	ReplyUrl string `json:"reply_url"`
}

// IdentityProviderProps defines model for IdentityProviderProps.
type IdentityProviderProps struct {
	ApplicationId     string `json:"application_id"`
	ApplicationSecret string `json:"application_secret"`
	ApprovalScope     string `json:"approval_scope"`
	IsButtonHidden    *bool  `json:"is_button_hidden,omitempty"`
}

// IdentityProviderSaml defines model for IdentityProviderSaml.
type IdentityProviderSaml struct {
	EmailAttribute string `json:"email_attribute"`
	MetadataUrl    string `json:"metadata_url"`
}

// IdentityProviders defines model for IdentityProviders.
type IdentityProviders struct {
	Google IdentityProviderProps `json:"google"`
}

// Invitation defines model for Invitation.
type Invitation struct {
	// Email 招待されたユーザーのメールアドレス(email address of the invited user)
	Email string    `json:"email"`
	Envs  []UserEnv `json:"envs"`

	// ExpiredAt 招待の有効期限(expiration date of the invitation)
	ExpiredAt int  `json:"expired_at"`
	Id        Uuid `json:"id"`

	// InvitationUrl 招待URL(invitation URL)
	InvitationUrl string           `json:"invitation_url"`
	Status        InvitationStatus `json:"status"`
}

// InvitationStatus defines model for InvitationStatus.
type InvitationStatus string

// InvitationValidity 招待の有効性(invitation validity)
type InvitationValidity struct {
	// IsValid 招待が有効か否か(Whether the validation is valid or not)
	IsValid bool `json:"is_valid"`
}

// Invitations defines model for Invitations.
type Invitations struct {
	// Invitations 招待一覧(invitation list)
	Invitations []Invitation `json:"invitations"`
}

// InvoiceLanguage 請求書の言語
//
// Language of invoice
type InvoiceLanguage string

// LinkAwsMarketplaceParam defines model for LinkAwsMarketplaceParam.
type LinkAwsMarketplaceParam struct {
	// AccessToken アクセストークン(access token)
	AccessToken string `json:"access_token"`

	// RegistrationToken Registration Token
	RegistrationToken string `json:"registration_token"`

	// TenantId テナントID(tenant ID)
	TenantId string `json:"tenant_id"`
}

// MessageTemplate defines model for MessageTemplate.
type MessageTemplate struct {
	// Message メッセージ(message)
	Message string `json:"message"`

	// Subject タイトル(title)
	Subject string `json:"subject"`
}

// MfaConfiguration MFAデバイス認証設定(MFA device authentication settings)
// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
type MfaConfiguration struct {
	// MfaConfiguration on: 全ユーザーがログイン時に適用(apply when all users log in)
	// optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled)
	// ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.)
	MfaConfiguration MfaConfigurationMfaConfiguration `json:"mfa_configuration"`
}

// MfaConfigurationMfaConfiguration on: 全ユーザーがログイン時に適用(apply when all users log in)
// optional: MFA要素が有効になっている個別ユーザーに適用(apply to individual users with MFA factor enabled)
// ※ パラメータは現在optionalで固定となります。(The parameter is currently optional and fixed.)
type MfaConfigurationMfaConfiguration string

// MfaPreference defines model for MfaPreference.
type MfaPreference struct {
	// Enabled MFAを有効にするか否か(enable MFA)
	Enabled bool `json:"enabled"`

	// Method MFAの方法(enabledがtrueの場合は必須)(MFA method (required if enabled is true))
	Method *MfaPreferenceMethod `json:"method,omitempty"`
}

// MfaPreferenceMethod MFAの方法(enabledがtrueの場合は必須)(MFA method (required if enabled is true))
type MfaPreferenceMethod string

// NotificationMessages defines model for NotificationMessages.
type NotificationMessages struct {
	AuthenticationMfa   MessageTemplate `json:"authentication_mfa"`
	CreateUser          MessageTemplate `json:"create_user"`
	ForgotPassword      MessageTemplate `json:"forgot_password"`
	InviteTenantUser    MessageTemplate `json:"invite_tenant_user"`
	ResendCode          MessageTemplate `json:"resend_code"`
	SignUp              MessageTemplate `json:"sign_up"`
	UpdateUserAttribute MessageTemplate `json:"update_user_attribute"`
	VerifyExternalUser  MessageTemplate `json:"verify_external_user"`
	VerifyUserAttribute MessageTemplate `json:"verify_user_attribute"`
}

// PasswordPolicy パスワードポリシー(password policy)
type PasswordPolicy struct {
	// IsRequireLowercase 一文字以上の小文字を含むが設定されているか(contains one or more lowercase characters)
	IsRequireLowercase bool `json:"is_require_lowercase"`

	// IsRequireNumbers 一文字以上の数字を含むが設定されているか(contains one or more numeric characters)
	IsRequireNumbers bool `json:"is_require_numbers"`

	// IsRequireSymbols 一文字以上の特殊文字を含むが設定されているか(contains one or more special characters)
	IsRequireSymbols bool `json:"is_require_symbols"`

	// IsRequireUppercase 一文字以上の大文字を含むが設定されているか(contains one or more uppercase letters)
	IsRequireUppercase bool `json:"is_require_uppercase"`

	// MinimumLength 最小文字数(minimum number of characters)
	MinimumLength uint64 `json:"minimum_length"`

	// TemporaryPasswordValidityDays 仮パスワードの有効期限(temporary password expiration date)
	TemporaryPasswordValidityDays uint64 `json:"temporary_password_validity_days"`
}

// PlanHistories defines model for PlanHistories.
type PlanHistories struct {
	// PlanHistories 料金プラン履歴
	PlanHistories []PlanHistory `json:"plan_histories"`
}

// PlanHistory defines model for PlanHistory.
type PlanHistory struct {
	// DeleteUsage stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。
	// プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。
	// 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。
	//
	// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans.
	// When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items.
	// The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
	DeleteUsage *DeleteUsage `json:"delete_usage,omitempty"`

	// PlanAppliedAt 登録日時
	PlanAppliedAt int  `json:"plan_applied_at"`
	PlanId        Uuid `json:"plan_id"`

	// ProrationBehavior stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。
	// プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。
	//
	// If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans.
	// When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
	ProrationBehavior *ProrationBehavior `json:"proration_behavior,omitempty"`
	TaxRateId         *Uuid              `json:"tax_rate_id,omitempty"`
}

// PlanReservation defines model for PlanReservation.
type PlanReservation struct {
	// DeleteUsage stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。
	// プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。
	// 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。
	//
	// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans.
	// When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items.
	// The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
	DeleteUsage       *DeleteUsage `json:"delete_usage,omitempty"`
	NextPlanId        *Uuid        `json:"next_plan_id,omitempty"`
	NextPlanTaxRateId *Uuid        `json:"next_plan_tax_rate_id,omitempty"`

	// ProrationBehavior stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。
	// プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。
	//
	// If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans.
	// When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
	ProrationBehavior *ProrationBehavior `json:"proration_behavior,omitempty"`

	// UsingNextPlanFrom 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ）
	// (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.))
	UsingNextPlanFrom *int `json:"using_next_plan_from,omitempty"`
}

// ProrationBehavior stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。
// プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。
//
// If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans.
// When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
type ProrationBehavior string

// ProviderName defines model for ProviderName.
type ProviderName string

// ProviderType defines model for ProviderType.
type ProviderType string

// RecaptchaProps reCAPTCHA認証設定(reCAPTCHA authentication settings)
// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
type RecaptchaProps struct {
	// SecretKey シークレットキー(secret key)
	SecretKey string `json:"secret_key"`

	// SiteKey サイトキー(site key)
	SiteKey string `json:"site_key"`
}

// RequestEmailUpdateParam defines model for RequestEmailUpdateParam.
type RequestEmailUpdateParam struct {
	AccessToken string `json:"access_token"`

	// Email メールアドレス(Email Address)
	Email string `json:"email"`
}

// RequestExternalUserLinkParam defines model for RequestExternalUserLinkParam.
type RequestExternalUserLinkParam struct {
	AccessToken string `json:"access_token"`
}

// ResendSignUpConfirmationEmailParam defines model for ResendSignUpConfirmationEmailParam.
type ResendSignUpConfirmationEmailParam struct {
	// Email メールアドレス(Email Address)
	Email string `json:"email"`
}

// Role 役割(ロール)情報(role info)
type Role struct {
	// DisplayName 役割(ロール)表示名(role display name)
	DisplayName string `json:"display_name"`

	// RoleName 役割(ロール)名(role name)
	RoleName string `json:"role_name"`
}

// Roles defines model for Roles.
type Roles struct {
	Roles []Role `json:"roles"`
}

// SaasId defines model for SaasId.
type SaasId struct {
	EnvId Id `json:"env_id"`

	// SaasId saas id
	SaasId   string `json:"saas_id"`
	TenantId Uuid   `json:"tenant_id"`
}

// SaasUser defines model for SaasUser.
type SaasUser struct {
	// Email メールアドレス(E-mail)
	Email string `json:"email"`
	Id    Uuid   `json:"id"`
}

// SaasUsers defines model for SaasUsers.
type SaasUsers struct {
	Users []SaasUser `json:"users"`
}

// SelfRegist セルフサインアップを許可設定(self sign-up permission)
type SelfRegist struct {
	Enable bool `json:"enable"`
}

// SignInSettings defines model for SignInSettings.
type SignInSettings struct {
	// AccountVerification アカウント認証設定(account authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	AccountVerification AccountVerification `json:"account_verification"`

	// DeviceConfiguration 信頼済みデバイスの記憶の設定(settings for remembering trusted devices)
	DeviceConfiguration DeviceConfiguration `json:"device_configuration"`

	// IdentityProviderConfiguration 外部IDプロバイダを利用したサインインの設定をするために必要な情報です。(This information is required to set up sign-in using an external identity provider.)
	// 変更はできません。(It cannot be changed.)
	IdentityProviderConfiguration IdentityProviderConfiguration `json:"identity_provider_configuration"`

	// MfaConfiguration MFAデバイス認証設定(MFA device authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	MfaConfiguration MfaConfiguration `json:"mfa_configuration"`

	// PasswordPolicy パスワードポリシー(password policy)
	PasswordPolicy PasswordPolicy `json:"password_policy"`

	// RecaptchaProps reCAPTCHA認証設定(reCAPTCHA authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	RecaptchaProps RecaptchaProps `json:"recaptcha_props"`

	// SelfRegist セルフサインアップを許可設定(self sign-up permission)
	SelfRegist SelfRegist `json:"self_regist"`
}

// SignUpParam defines model for SignUpParam.
type SignUpParam struct {
	// Email メールアドレス(Email Address)
	Email string `json:"email"`
}

// SignUpWithAwsMarketplaceParam defines model for SignUpWithAwsMarketplaceParam.
type SignUpWithAwsMarketplaceParam struct {
	// Email メールアドレス(Email Address)
	Email string `json:"email"`

	// RegistrationToken Registration Token
	RegistrationToken string `json:"registration_token"`
}

// SoftwareTokenSecretCode defines model for SoftwareTokenSecretCode.
type SoftwareTokenSecretCode struct {
	// SecretCode シークレットコード(secret code)
	SecretCode string `json:"secret_code"`
}

// Tenant defines model for Tenant.
type Tenant struct {
	// Attributes 属性情報(attribute info)
	Attributes map[string]interface{} `json:"attributes"`

	// BackOfficeStaffEmail 事務管理部門スタッフメールアドレス(administrative staff email address)
	BackOfficeStaffEmail string       `json:"back_office_staff_email"`
	BillingInfo          *BillingInfo `json:"billing_info,omitempty"`

	// DeleteUsage stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。
	// プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。
	// 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。
	//
	// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans.
	// When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items.
	// The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
	DeleteUsage *DeleteUsage `json:"delete_usage,omitempty"`
	Id          Uuid         `json:"id"`

	// Name テナント名(tenant name)
	Name              string `json:"name"`
	NextPlanId        *Uuid  `json:"next_plan_id,omitempty"`
	NextPlanTaxRateId *Uuid  `json:"next_plan_tax_rate_id,omitempty"`

	// PlanHistories 料金プラン履歴
	PlanHistories []PlanHistory `json:"plan_histories"`
	PlanId        *Uuid         `json:"plan_id,omitempty"`

	// ProrationBehavior stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。
	// プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。
	//
	// If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans.
	// When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
	ProrationBehavior *ProrationBehavior `json:"proration_behavior,omitempty"`

	// UsingNextPlanFrom 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ）
	// (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.))
	UsingNextPlanFrom *int `json:"using_next_plan_from,omitempty"`
}

// TenantAttributes defines model for TenantAttributes.
type TenantAttributes struct {
	// TenantAttributes テナント属性定義(Tenant Attribute Definition)
	TenantAttributes []Attribute `json:"tenant_attributes"`
}

// TenantDetail defines model for TenantDetail.
type TenantDetail struct {
	// Attributes 属性情報(attribute info)
	Attributes map[string]interface{} `json:"attributes"`

	// BackOfficeStaffEmail 事務管理部門スタッフメールアドレス(administrative staff email address)
	BackOfficeStaffEmail string       `json:"back_office_staff_email"`
	BillingInfo          *BillingInfo `json:"billing_info,omitempty"`

	// CurrentPlanPeriodEnd 現在のプランの終了日時(current plan period end)
	CurrentPlanPeriodEnd *int `json:"current_plan_period_end,omitempty"`

	// CurrentPlanPeriodStart 現在のプランの開始日時(current plan period start)
	CurrentPlanPeriodStart *int `json:"current_plan_period_start,omitempty"`

	// DeleteUsage stripe連携している場合で、プラン変更時に従量課金アイテムを削除するか設定できます。
	// プラン変更した場合に、現在のサブスクリプションに含まれる従量課金アイテムを全て削除して、従量課金アイテムに基づく請求の発生を止めることができます。
	// 即時に記録している使用量がクリアされます。それらは復元できないため、delete_usageをtrueにしたプラン変更予約は取り消しできません。
	//
	// If you have a stripe linkage,  you can set whether to delete pay-as-you-go items when changing plans.
	// When you change plan, you can remove all pay-as-you-go items included in your current subscription to stop being billed based on pay-as-you-go items.
	// The recorded usage is cleared immediately. Since it cannot be restored, please note that plan change reservations with delete_usage set to true cannot be canceled.
	DeleteUsage *DeleteUsage `json:"delete_usage,omitempty"`
	Id          Uuid         `json:"id"`

	// Name テナント名(tenant name)
	Name              string `json:"name"`
	NextPlanId        *Uuid  `json:"next_plan_id,omitempty"`
	NextPlanTaxRateId *Uuid  `json:"next_plan_tax_rate_id,omitempty"`

	// PlanHistories 料金プラン履歴
	PlanHistories []PlanHistory `json:"plan_histories"`
	PlanId        *Uuid         `json:"plan_id,omitempty"`

	// ProrationBehavior stripe連携している場合で、プラン変更時の比例配分の挙動を設定できます。
	// プラン変更した場合に、請求金額を日割り計算し次回請求書に反映させるか、日割り計算した請求を即時に発行する、日割り計算をしないを設定できます。
	//
	// If you have a strine linkage, you can set the behavior of the proportional allocation when changing plans.
	// When a plan is changed, you can set whether to prorate the billing amount and reflect it on the next invoice, to issue a prorated invoice immediately, or not to prorate at all.
	ProrationBehavior *ProrationBehavior `json:"proration_behavior,omitempty"`

	// UsingNextPlanFrom 次回料金プラン開始日時（stripe連携時、当月月初の0時（UTC）を指定すると当月月初開始のサブスクリプションを作成できます。ex. 2023年1月の場合は、1672531200 ）
	// (Next billing plan start time (When using stripe, you can create a subscription that starts at the beginning of the current month by specifying 00:00 (UTC) at the beginning of the current month. Ex. 1672531200 for January 2023.))
	UsingNextPlanFrom *int `json:"using_next_plan_from,omitempty"`
}

// TenantIdentityProviderProps defines model for TenantIdentityProviderProps.
type TenantIdentityProviderProps struct {
	union json.RawMessage
}

// TenantIdentityProviders defines model for TenantIdentityProviders.
type TenantIdentityProviders struct {
	Saml *struct {
		EmailAttribute string `json:"email_attribute"`
		MetadataUrl    string `json:"metadata_url"`
		SignInUrl      string `json:"sign_in_url"`
	} `json:"saml,omitempty"`
}

// TenantProps defines model for TenantProps.
type TenantProps struct {
	// Attributes 属性情報(attribute info)
	Attributes map[string]interface{} `json:"attributes"`

	// BackOfficeStaffEmail 事務管理部門スタッフメールアドレス(administrative staff email address)
	BackOfficeStaffEmail string `json:"back_office_staff_email"`

	// Name テナント名(tenant name)
	Name string `json:"name"`
}

// Tenants テナント情報(Tenant Info)
type Tenants struct {
	Tenants []Tenant `json:"tenants"`
}

// UpdateAuthInfoParam defines model for UpdateAuthInfoParam.
type UpdateAuthInfoParam = AuthInfo

// UpdateBasicInfoParam defines model for UpdateBasicInfoParam.
type UpdateBasicInfoParam struct {
	// DomainName ドメイン名(Domain Name)
	DomainName string `json:"domain_name"`

	// FromEmailAddress 認証メールの送信元メールアドレス(Sender email of authentication email)
	FromEmailAddress string `json:"from_email_address"`

	// ReplyEmailAddress 認証メールの返信元メールアドレス(Reply-from email address of authentication email)
	ReplyEmailAddress *string `json:"reply_email_address,omitempty"`
}

// UpdateCustomizePageSettingsParam defines model for UpdateCustomizePageSettingsParam.
type UpdateCustomizePageSettingsParam struct {
	// Favicon ファビコン(favicon)
	Favicon string `json:"favicon"`

	// GoogleTagManagerContainerId Google Tag Manager コンテナ ID(Google Tag Manager container ID)
	GoogleTagManagerContainerId string `json:"google_tag_manager_container_id"`

	// Icon サービスアイコン(service icon)
	Icon string `json:"icon"`

	// PrivacyPolicyUrl プライバシーポリシーURL(privacy policy URL)
	PrivacyPolicyUrl string `json:"privacy_policy_url"`

	// TermsOfServiceUrl 利用規約URL(terms of service URL)
	TermsOfServiceUrl string `json:"terms_of_service_url"`

	// Title サービス名(service name)
	Title string `json:"title"`
}

// UpdateCustomizePagesParam defines model for UpdateCustomizePagesParam.
type UpdateCustomizePagesParam struct {
	PasswordResetPage *CustomizePageProps `json:"password_reset_page,omitempty"`
	SignInPage        *CustomizePageProps `json:"sign_in_page,omitempty"`
	SignUpPage        *CustomizePageProps `json:"sign_up_page,omitempty"`
}

// UpdateEnvParam defines model for UpdateEnvParam.
type UpdateEnvParam struct {
	// DisplayName 環境表示名(env display name)
	DisplayName *string `json:"display_name,omitempty"`

	// Name 環境名(env name)
	Name string `json:"name"`
}

// UpdateIdentityProviderParam defines model for UpdateIdentityProviderParam.
type UpdateIdentityProviderParam struct {
	IdentityProviderProps *IdentityProviderProps `json:"identity_provider_props,omitempty"`
	Provider              ProviderName           `json:"provider"`
}

// UpdateNotificationMessagesParam defines model for UpdateNotificationMessagesParam.
type UpdateNotificationMessagesParam struct {
	AuthenticationMfa   *MessageTemplate `json:"authentication_mfa,omitempty"`
	CreateUser          *MessageTemplate `json:"create_user,omitempty"`
	ForgotPassword      *MessageTemplate `json:"forgot_password,omitempty"`
	InviteTenantUser    *MessageTemplate `json:"invite_tenant_user,omitempty"`
	ResendCode          *MessageTemplate `json:"resend_code,omitempty"`
	SignUp              *MessageTemplate `json:"sign_up,omitempty"`
	UpdateUserAttribute *MessageTemplate `json:"update_user_attribute,omitempty"`
	VerifyExternalUser  *MessageTemplate `json:"verify_external_user,omitempty"`
	VerifyUserAttribute *MessageTemplate `json:"verify_user_attribute,omitempty"`
}

// UpdateSaasUserEmailParam defines model for UpdateSaasUserEmailParam.
type UpdateSaasUserEmailParam struct {
	// Email メールアドレス(e-mail)
	Email string `json:"email"`
}

// UpdateSaasUserPasswordParam defines model for UpdateSaasUserPasswordParam.
type UpdateSaasUserPasswordParam struct {
	// Password パスワード(password)
	Password string `json:"password"`
}

// UpdateSignInSettingsParam defines model for UpdateSignInSettingsParam.
type UpdateSignInSettingsParam struct {
	// AccountVerification アカウント認証設定(account authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	AccountVerification *AccountVerification `json:"account_verification,omitempty"`

	// DeviceConfiguration 信頼済みデバイスの記憶の設定(settings for remembering trusted devices)
	DeviceConfiguration *DeviceConfiguration `json:"device_configuration,omitempty"`

	// MfaConfiguration MFAデバイス認証設定(MFA device authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	MfaConfiguration *MfaConfiguration `json:"mfa_configuration,omitempty"`

	// PasswordPolicy パスワードポリシー(password policy)
	PasswordPolicy *PasswordPolicy `json:"password_policy,omitempty"`

	// RecaptchaProps reCAPTCHA認証設定(reCAPTCHA authentication settings)
	// ※ 未提供の機能のため、変更・保存はできません(This function is not yet provided, so it cannot be changed or saved.)
	RecaptchaProps *RecaptchaProps `json:"recaptcha_props,omitempty"`

	// SelfRegist セルフサインアップを許可設定(self sign-up permission)
	SelfRegist *SelfRegist `json:"self_regist,omitempty"`
}

// UpdateSoftwareTokenParam defines model for UpdateSoftwareTokenParam.
type UpdateSoftwareTokenParam struct {
	// AccessToken アクセストークン(access token)
	AccessToken string `json:"access_token"`

	// VerificationCode 検証コード(verification code)
	VerificationCode string `json:"verification_code"`
}

// UpdateTenantBillingInfoParam defines model for UpdateTenantBillingInfoParam.
type UpdateTenantBillingInfoParam = BillingInfo

// UpdateTenantIdentityProviderParam identity_provider_propsがnullの場合は、provider_typeで指定された外部IDプロバイダのサインイン情報を無効化します。
//
// If identity_provider_props is null, the sign-in information for the external identity provider specified in provider_type is disabled.
type UpdateTenantIdentityProviderParam struct {
	IdentityProviderProps *TenantIdentityProviderProps `json:"identity_provider_props,omitempty"`
	ProviderType          ProviderType                 `json:"provider_type"`
}

// UpdateTenantParam defines model for UpdateTenantParam.
type UpdateTenantParam = TenantProps

// UpdateTenantPlanParam defines model for UpdateTenantPlanParam.
type UpdateTenantPlanParam = PlanReservation

// UpdateTenantUserParam defines model for UpdateTenantUserParam.
type UpdateTenantUserParam struct {
	// Attributes 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）
	//
	// Attribute information (Get information set by defining user attributes in the SaaS development console)
	Attributes map[string]interface{} `json:"attributes"`
}

// UpdateUserMfaPreferenceParam defines model for UpdateUserMfaPreferenceParam.
type UpdateUserMfaPreferenceParam = MfaPreference

// User defines model for User.
type User struct {
	// Attributes 属性情報（SaaS 開発コンソールでユーザー属性定義を行い設定された情報を取得します）
	//
	// Attribute information (Get information set by defining user attributes in the SaaS development console)
	Attributes map[string]interface{} `json:"attributes"`

	// Email メールアドレス(E-mail)
	Email string    `json:"email"`
	Envs  []UserEnv `json:"envs"`

	// Id ユーザーID(User ID)
	Id       string `json:"id"`
	TenantId Uuid   `json:"tenant_id"`

	// TenantName テナント名(Tenant Name)
	TenantName string `json:"tenant_name"`
}

// UserAttributes defines model for UserAttributes.
type UserAttributes struct {
	// UserAttributes ユーザー属性定義(User attribute definition)
	UserAttributes []Attribute `json:"user_attributes"`
}

// UserAvailableEnv defines model for UserAvailableEnv.
type UserAvailableEnv struct {
	// DisplayName 環境表示名(env display name)
	DisplayName *string `json:"display_name,omitempty"`
	Id          Id      `json:"id"`

	// Name 環境名(env name)
	Name string `json:"name"`

	// Roles 役割(ロール)情報(role info)
	Roles []Role `json:"roles"`
}

// UserAvailableTenant defines model for UserAvailableTenant.
type UserAvailableTenant struct {
	// BackOfficeStaffEmail バックオフィス担当者のメール(back office contact email)
	BackOfficeStaffEmail string `json:"back_office_staff_email"`
	CompletedSignUp      bool   `json:"completed_sign_up"`

	// Envs 環境情報、役割(ロール)情報(environmental info, role info)
	Envs []UserAvailableEnv `json:"envs"`
	Id   Uuid               `json:"id"`

	// IsPaid テナントの支払い状況(tenant payment status)
	//  ※ 現在はストライプ連携時のみ返却されます。Currently, it is returned only when stripe is linked.
	IsPaid *bool `json:"is_paid,omitempty"`

	// Name テナント名(tenant name)
	Name   string `json:"name"`
	PlanId *Uuid  `json:"plan_id,omitempty"`

	// UserAttribute ユーザー追加属性(user additional attributes)
	UserAttribute map[string]interface{} `json:"user_attribute"`
}

// UserEnv defines model for UserEnv.
type UserEnv = UserAvailableEnv

// UserInfo defines model for UserInfo.
type UserInfo struct {
	// Email メールアドレス(E-mail)
	Email string `json:"email"`
	Id    Uuid   `json:"id"`

	// Tenants テナント情報(Tenant Info)
	Tenants []UserAvailableTenant `json:"tenants"`
}

// Users defines model for Users.
type Users struct {
	Users []User `json:"users"`
}

// Uuid defines model for Uuid.
type Uuid = string

// ValidateInvitationParam 既存ユーザーの場合はアクセストークン、新規ユーザーの場合はメールアドレスとパスワードが必須です。
//
// Access token is required for existing users, and email and password is required for new users.
type ValidateInvitationParam struct {
	// AccessToken 招待されたユーザーのアクセストークン(access token of the invited user)
	AccessToken *string `json:"access_token,omitempty"`

	// Email 招待されたユーザーのメールアドレス(email address of the invited user)
	Email *string `json:"email,omitempty"`

	// Password 招待されたユーザーのパスワード(password of the invited user)
	Password *string `json:"password,omitempty"`
}

// ApiKey defines model for ApiKey.
type ApiKey = string

// AuthFlow defines model for AuthFlow.
type AuthFlow string

// Code defines model for Code.
type Code = Uuid

// EnvId defines model for EnvId.
type EnvId = Id

// InvitationId defines model for InvitationId.
type InvitationId = Uuid

// RefreshToken defines model for RefreshToken.
type RefreshToken = string

// RoleName defines model for RoleName.
type RoleName = string

// TenantId defines model for TenantId.
type TenantId = Uuid

// UserId defines model for UserId.
type UserId = string

// GetAuthCredentialsParams defines parameters for GetAuthCredentials.
type GetAuthCredentialsParams struct {
	// Code 一時コード(Temp Code)
	Code *Code `form:"code,omitempty" json:"code,omitempty"`

	// AuthFlow 認証フロー（Authentication Flow）
	// tempCodeAuth: 一時コードを利用した認証情報の取得
	// refreshTokenAuth: リフレッシュトークンを利用した認証情報の取得
	// 指定されていない場合は tempCodeAuth になります
	AuthFlow *GetAuthCredentialsParamsAuthFlow `form:"auth-flow,omitempty" json:"auth-flow,omitempty"`

	// RefreshToken リフレッシュトークン(Refresh Token)
	RefreshToken *RefreshToken `form:"refresh-token,omitempty" json:"refresh-token,omitempty"`
}

// GetAuthCredentialsParamsAuthFlow defines parameters for GetAuthCredentials.
type GetAuthCredentialsParamsAuthFlow string

// GetUserInfoParams defines parameters for GetUserInfo.
type GetUserInfoParams struct {
	// Token IDトークン(ID Token)
	Token string `form:"token" json:"token"`
}

// UpdateAuthInfoJSONRequestBody defines body for UpdateAuthInfo for application/json ContentType.
type UpdateAuthInfoJSONRequestBody = UpdateAuthInfoParam

// LinkAwsMarketplaceJSONRequestBody defines body for LinkAwsMarketplace for application/json ContentType.
type LinkAwsMarketplaceJSONRequestBody = LinkAwsMarketplaceParam

// SignUpWithAwsMarketplaceJSONRequestBody defines body for SignUpWithAwsMarketplace for application/json ContentType.
type SignUpWithAwsMarketplaceJSONRequestBody = SignUpWithAwsMarketplaceParam

// ConfirmSignUpWithAwsMarketplaceJSONRequestBody defines body for ConfirmSignUpWithAwsMarketplace for application/json ContentType.
type ConfirmSignUpWithAwsMarketplaceJSONRequestBody = ConfirmSignUpWithAwsMarketplaceParam

// UpdateBasicInfoJSONRequestBody defines body for UpdateBasicInfo for application/json ContentType.
type UpdateBasicInfoJSONRequestBody = UpdateBasicInfoParam

// CreateAuthCredentialsJSONRequestBody defines body for CreateAuthCredentials for application/json ContentType.
type CreateAuthCredentialsJSONRequestBody = CreateAuthCredentialsParam

// UpdateCustomizePageSettingsJSONRequestBody defines body for UpdateCustomizePageSettings for application/json ContentType.
type UpdateCustomizePageSettingsJSONRequestBody = UpdateCustomizePageSettingsParam

// UpdateCustomizePagesJSONRequestBody defines body for UpdateCustomizePages for application/json ContentType.
type UpdateCustomizePagesJSONRequestBody = UpdateCustomizePagesParam

// CreateEnvJSONRequestBody defines body for CreateEnv for application/json ContentType.
type CreateEnvJSONRequestBody = CreateEnvParam

// UpdateEnvJSONRequestBody defines body for UpdateEnv for application/json ContentType.
type UpdateEnvJSONRequestBody = UpdateEnvParam

// ConfirmExternalUserLinkJSONRequestBody defines body for ConfirmExternalUserLink for application/json ContentType.
type ConfirmExternalUserLinkJSONRequestBody = ConfirmExternalUserLinkParam

// RequestExternalUserLinkJSONRequestBody defines body for RequestExternalUserLink for application/json ContentType.
type RequestExternalUserLinkJSONRequestBody = RequestExternalUserLinkParam

// UpdateIdentityProviderJSONRequestBody defines body for UpdateIdentityProvider for application/json ContentType.
type UpdateIdentityProviderJSONRequestBody = UpdateIdentityProviderParam

// ValidateInvitationJSONRequestBody defines body for ValidateInvitation for application/json ContentType.
type ValidateInvitationJSONRequestBody = ValidateInvitationParam

// UpdateNotificationMessagesJSONRequestBody defines body for UpdateNotificationMessages for application/json ContentType.
type UpdateNotificationMessagesJSONRequestBody = UpdateNotificationMessagesParam

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleParam

// UpdateSignInSettingsJSONRequestBody defines body for UpdateSignInSettings for application/json ContentType.
type UpdateSignInSettingsJSONRequestBody = UpdateSignInSettingsParam

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody = SignUpParam

// ResendSignUpConfirmationEmailJSONRequestBody defines body for ResendSignUpConfirmationEmail for application/json ContentType.
type ResendSignUpConfirmationEmailJSONRequestBody = ResendSignUpConfirmationEmailParam

// CreateTenantAttributeJSONRequestBody defines body for CreateTenantAttribute for application/json ContentType.
type CreateTenantAttributeJSONRequestBody = CreateTenantAttributeParam

// CreateTenantJSONRequestBody defines body for CreateTenant for application/json ContentType.
type CreateTenantJSONRequestBody = CreateTenantParam

// UpdateTenantJSONRequestBody defines body for UpdateTenant for application/json ContentType.
type UpdateTenantJSONRequestBody = UpdateTenantParam

// UpdateTenantBillingInfoJSONRequestBody defines body for UpdateTenantBillingInfo for application/json ContentType.
type UpdateTenantBillingInfoJSONRequestBody = UpdateTenantBillingInfoParam

// UpdateTenantIdentityProviderJSONRequestBody defines body for UpdateTenantIdentityProvider for application/json ContentType.
type UpdateTenantIdentityProviderJSONRequestBody = UpdateTenantIdentityProviderParam

// CreateTenantInvitationJSONRequestBody defines body for CreateTenantInvitation for application/json ContentType.
type CreateTenantInvitationJSONRequestBody = CreateTenantInvitationParam

// UpdateTenantPlanJSONRequestBody defines body for UpdateTenantPlan for application/json ContentType.
type UpdateTenantPlanJSONRequestBody = UpdateTenantPlanParam

// CreateTenantUserJSONRequestBody defines body for CreateTenantUser for application/json ContentType.
type CreateTenantUserJSONRequestBody = CreateTenantUserParam

// UpdateTenantUserJSONRequestBody defines body for UpdateTenantUser for application/json ContentType.
type UpdateTenantUserJSONRequestBody = UpdateTenantUserParam

// CreateTenantUserRolesJSONRequestBody defines body for CreateTenantUserRoles for application/json ContentType.
type CreateTenantUserRolesJSONRequestBody = CreateTenantUserRolesParam

// CreateUserAttributeJSONRequestBody defines body for CreateUserAttribute for application/json ContentType.
type CreateUserAttributeJSONRequestBody = CreateUserAttributeParam

// CreateSaasUserJSONRequestBody defines body for CreateSaasUser for application/json ContentType.
type CreateSaasUserJSONRequestBody = CreateSaasUserParam

// UpdateSaasUserEmailJSONRequestBody defines body for UpdateSaasUserEmail for application/json ContentType.
type UpdateSaasUserEmailJSONRequestBody = UpdateSaasUserEmailParam

// ConfirmEmailUpdateJSONRequestBody defines body for ConfirmEmailUpdate for application/json ContentType.
type ConfirmEmailUpdateJSONRequestBody = ConfirmEmailUpdateParam

// RequestEmailUpdateJSONRequestBody defines body for RequestEmailUpdate for application/json ContentType.
type RequestEmailUpdateJSONRequestBody = RequestEmailUpdateParam

// UpdateUserMfaPreferenceJSONRequestBody defines body for UpdateUserMfaPreference for application/json ContentType.
type UpdateUserMfaPreferenceJSONRequestBody = UpdateUserMfaPreferenceParam

// UpdateSoftwareTokenJSONRequestBody defines body for UpdateSoftwareToken for application/json ContentType.
type UpdateSoftwareTokenJSONRequestBody = UpdateSoftwareTokenParam

// CreateSecretCodeJSONRequestBody defines body for CreateSecretCode for application/json ContentType.
type CreateSecretCodeJSONRequestBody = CreateSecretCodeParam

// UpdateSaasUserPasswordJSONRequestBody defines body for UpdateSaasUserPassword for application/json ContentType.
type UpdateSaasUserPasswordJSONRequestBody = UpdateSaasUserPasswordParam

// AsIdentityProviderSaml returns the union data inside the TenantIdentityProviderProps as a IdentityProviderSaml
func (t TenantIdentityProviderProps) AsIdentityProviderSaml() (IdentityProviderSaml, error) {
	var body IdentityProviderSaml
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityProviderSaml overwrites any union data inside the TenantIdentityProviderProps as the provided IdentityProviderSaml
func (t *TenantIdentityProviderProps) FromIdentityProviderSaml(v IdentityProviderSaml) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityProviderSaml performs a merge with any union data inside the TenantIdentityProviderProps, using the provided IdentityProviderSaml
func (t *TenantIdentityProviderProps) MergeIdentityProviderSaml(v IdentityProviderSaml) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t TenantIdentityProviderProps) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TenantIdentityProviderProps) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
